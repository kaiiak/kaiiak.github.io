<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.iakmai.com</id>
    <title>KAIIAK • Posts by &#34;apue&#34; tag</title>
    <link href="https://blog.iakmai.com" />
    <updated>2016-04-27T15:08:52.000Z</updated>
    <category term="Linux" />
    <category term="APUE" />
    <category term="随笔" />
    <category term="vim" />
    <category term="YouCompleteMe" />
    <category term="C" />
    <category term="ACM" />
    <category term="ZOJ" />
    <category term="GOLANG" />
    <category term="SMTP" />
    <category term="Eclipse" />
    <category term="PyDev" />
    <category term="NSQ" />
    <category term="DOCKER" />
    <category term="sqlite" />
    <category term="tree" />
    <category term="vlc" />
    <category term="CSharp" />
    <category term="Python" />
    <category term="树莓派" />
    <category term="PRI.GPIO" />
    <category term="Xshell" />
    <category term="lirc" />
    <category term="openWRT" />
    <category term="Hexo主题" />
    <category term="pylirc" />
    <category term="FFMPEG" />
    <entry>
        <id>https://blog.iakmai.com/2016/04/27/APUE_study_notes-process-control/</id>
        <title>APUE学习笔记——进程控制</title>
        <link rel="alternate" href="https://blog.iakmai.com/2016/04/27/APUE_study_notes-process-control/"/>
        <content type="html">&lt;h1 id=&#34;进程标识&#34;&gt;&lt;a href=&#34;#进程标识&#34; class=&#34;headerlink&#34; title=&#34;进程标识&#34;&gt;&lt;/a&gt;进程标识&lt;/h1&gt;&lt;p&gt;每个进程都有一个非负整型表示的唯一进程ID。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID为0的进程通常是调度进程，常常被称为&lt;code&gt;交换进程(swapper)&lt;/code&gt;。该进程是内核的一部分，它并不执行任何磁盘上的程序，因此被称为系统进程。&lt;/li&gt;
&lt;li&gt;进程ID为1的通常是&lt;code&gt;init&lt;/code&gt;进程，在自举过程结束时由内核调用。&lt;code&gt;init&lt;/code&gt;进程决不会终止。它是一个普通的用户进程，但它以超级用户特权运行。&lt;/li&gt;
&lt;li&gt;进程ID2是&lt;code&gt;页守护进程(page daemon)&lt;/code&gt;，此进程负责支持虚拟存储器系统的分页操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getpid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;     &lt;span class=&#34;comment&#34;&gt;/* 返回值：调用进程的进程ID */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getppid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;    &lt;span class=&#34;comment&#34;&gt;/* 返回值：调用进程的父进程ID */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getuid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;     &lt;span class=&#34;comment&#34;&gt;/* 返回值：调用进程的实际用户ID */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;geteuid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;    &lt;span class=&#34;comment&#34;&gt;/* 返回值：调用进程的有效用户ID */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getgid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;     &lt;span class=&#34;comment&#34;&gt;/* 返回值：调用进程的实际组ID */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getegid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;    &lt;span class=&#34;comment&#34;&gt;/* 返回值：调用进程的有效组ID */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;函数fork&#34;&gt;&lt;a href=&#34;#函数fork&#34; class=&#34;headerlink&#34; title=&#34;函数fork&#34;&gt;&lt;/a&gt;函数&lt;code&gt;fork&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fork&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：子进程返回0，父进程返回子进程ID；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由&lt;code&gt;fork&lt;/code&gt;创建的新进程被称为&lt;code&gt;子进程(child process)&lt;/code&gt;。&lt;br&gt;两次返回的区别是子进程的返回值是0，而父进程的返回值则是新建子进程的进程ID。&lt;br&gt;子进程和父进程继续执行&lt;code&gt;fork&lt;/code&gt;调用之后的指令。子进程是父进程的副本。父进程和子进程共享正文段。&lt;br&gt;一般来说，&lt;code&gt;fork&lt;/code&gt;之后是父进程先执行还是子进程先执行是不确定的。&lt;br&gt;在重定向父进程的标准输出时，子进程的标准输出也被重定向。&lt;br&gt;子进程和父进程共享一个文件偏移量。&lt;/p&gt;
&lt;h1 id=&#34;函数vfork&#34;&gt;&lt;a href=&#34;#函数vfork&#34; class=&#34;headerlink&#34; title=&#34;函数vfork&#34;&gt;&lt;/a&gt;函数&lt;code&gt;vfork&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;父进程和子进程共享数据段，并且先保诚子进程先运行，只有当子进程调用&lt;code&gt;exec&lt;/code&gt;或&lt;code&gt;exit&lt;/code&gt;后父进程才可能被调用运行。&lt;br&gt;&lt;em&gt;调用vfork()后，子程序要么_exit(),要么调用exec()，否则都是未定义行为(UB)&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;函数exit&#34;&gt;&lt;a href=&#34;#函数exit&#34; class=&#34;headerlink&#34; title=&#34;函数exit&#34;&gt;&lt;/a&gt;函数&lt;code&gt;exit&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;5种正常终止方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;main&lt;/code&gt;函数内执行&lt;code&gt;return&lt;/code&gt;语句。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;exit&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;_exit&lt;/code&gt;或&lt;code&gt;_Exit&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;进程的最后一个线程在其启动例程中执行&lt;code&gt;return&lt;/code&gt;语句。&lt;/li&gt;
&lt;li&gt;进程的最后一个线程调用&lt;code&gt;pthread_exit&lt;/code&gt;函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3种异常终止：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;code&gt;abort&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当进程接收到某些信号时。&lt;/li&gt;
&lt;li&gt;最后一个线程对“取消”(cancellation)请求作出响应。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于父进程已经终止的所有进程，它们的父进程都改为&lt;code&gt;init&lt;/code&gt;进程，我们称为这些进程由&lt;code&gt;init&lt;/code&gt;进程收养。&lt;/p&gt;
&lt;p&gt;在UNIX术语中，一个已经终止、但是其父进程尚未对其进行善后处理(获取终止子进程的有关信息、释放它仍占用的资源)的进程被称为&lt;code&gt;僵死进程(zombie)&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;函数wait和waitpid&#34;&gt;&lt;a href=&#34;#函数wait和waitpid&#34; class=&#34;headerlink&#34; title=&#34;函数wait和waitpid&#34;&gt;&lt;/a&gt;函数&lt;code&gt;wait&lt;/code&gt;和&lt;code&gt;waitpid&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;当一个进程正常或异常终止时，内核就向其父进程发送&lt;code&gt;SIGCHLD&lt;/code&gt;信号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果其所有子进程都还在运行，则阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个子进程终止，正等待父进程获取其终止状态，则取得该子进程的终止状态立即返回。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果没有任何子进程，则立即出错返回。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *statloc)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;waitpid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; pid, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *statloc, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; options)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回进程ID；若出错，返回0或-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在一个子进程终止前，&lt;code&gt;wait&lt;/code&gt;使其调用者阻塞，而&lt;code&gt;waitpid&lt;/code&gt;有一选项，可使调用者不阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;waitpid&lt;/code&gt;并不等待在其调用之后的第一个终止子进程，可以控制它所等待的进程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个函数的参数&lt;code&gt;statloc&lt;/code&gt;是一个整型指针。如果&lt;code&gt;statloc&lt;/code&gt;不是一个空指针，则终止进程的终止状态就存放在它所指向的单元内。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;宏&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WIFEXITED(status)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;若为正常正常终止子进程返回的状态，则为真。对于这种情况可执行WIFEXITED(status)，获取子进程传送给exit或_exit参数的低8位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WIFSIGNALED(status)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;若为异常终止子进程返回的状态，则为真(接到一个不捕捉的信号)。对于这种情况，可执行WIFSIGNALED(status)，则为真(接到一个不捕捉的信号)。对于这种情况，可执行()WTERMSIG(status),获取使子进程终止的信号编号。另外，有些实现(非Single UNIX Specification)定义宏WCOREDUMP(status),若已产生终止进程core文件，则它返回真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WIFSTOPPED(status)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;若为当前暂停子进程的返回的状态，则为真。对于这种情况，可执行WSTOPSIG(status),获取使子进程暂停的信号编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WIFCONTINUED(status)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;若在作业控制暂停后已经继续的子进程返回了状态，则为真&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;code&gt;waitpid&lt;/code&gt;函数中pid参数的作用解释如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pid == -1 等待任一子进程。此种情况下，&lt;code&gt;wait&lt;/code&gt;和&lt;code&gt;waitpid&lt;/code&gt;等效。&lt;/li&gt;
&lt;li&gt;pid &amp;gt; 0   等待进程ID与pid相等的子进程。&lt;/li&gt;
&lt;li&gt;pid == 0  等待组ID等于调用进程组ID的任一子进程。&lt;/li&gt;
&lt;li&gt;pid &amp;lt; -1  等待组ID等于pid绝对值的任一子进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;options常量&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WCONTINUED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;若实现支持罪业控制，那么由pid制定的任一子进程在停止后已经继续，但其状态尚未报告，则返回其状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WNOHANG&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;若由pid指定的子进程并不是立即可用的，则waitpid不阻塞，此时其返回值为0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WUNTRACED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;若某实现支持作业控制，而由pid指定的任一子进程已处于停止状态，并且其状态由停止以来还没报告过，则返回其状态。WIFSTOPPED宏确定返回值是否对应于一个停止的子进程。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;函数waittid&#34;&gt;&lt;a href=&#34;#函数waittid&#34; class=&#34;headerlink&#34; title=&#34;函数waittid&#34;&gt;&lt;/a&gt;函数&lt;code&gt;waittid&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;waittid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;idtype_t&lt;/span&gt; idtype, &lt;span class=&#34;keyword&#34;&gt;id_t&lt;/span&gt; id, &lt;span class=&#34;keyword&#34;&gt;siginfo_t&lt;/span&gt; *infop, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; options)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;idtype常量&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;P_PID&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;等待一特定进程：id包含要等待子进程的进程ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;P_PGID&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;等待一特定进程组中的任一子进程：id包含要等待子进程的进程组ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;P_ALL&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;等待任一子进程：忽略id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;options常量&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WCONTINUED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;等待一进程，它以前曾被停止，此后又已继续，但其状态尚未报告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WEXITED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;等待已退出的进程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WNOHANG&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;如无可用的子进程推出状态，立即返回而非阻塞&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WNOWAIT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不破坏子进程退出状态。该子进程退出状态可由后续的wait、waitid或waitpid调用取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WSTOPPED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;等待一进程，它已经停止，但其状态尚未报告&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;函数wait3和wait4&#34;&gt;&lt;a href=&#34;#函数wait3和wait4&#34; class=&#34;headerlink&#34; title=&#34;函数wait3和wait4&#34;&gt;&lt;/a&gt;函数&lt;code&gt;wait3&lt;/code&gt;和&lt;code&gt;wait4&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;wait3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *statloc, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; options, struct rusage *rusage)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;wait4&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;pid_t&lt;/span&gt; pid, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *statloc, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; options, struct rusage *rusage)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回进程ID；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;函数exec&#34;&gt;&lt;a href=&#34;#函数exec&#34; class=&#34;headerlink&#34; title=&#34;函数exec&#34;&gt;&lt;/a&gt;函数&lt;code&gt;exec&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;调用&lt;code&gt;exec&lt;/code&gt;并不创建新进程，所以前后的进程ID并没有改变。&lt;code&gt;exec&lt;/code&gt;只是用磁盘上的一个新程序替换了当前进程的正文段、数据段、堆栈和栈段。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;execl&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *arg0, ... &lt;span class=&#34;comment&#34;&gt;/* (char *)0 */&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;execv&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; argv[])&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;execle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *arg0, ...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* (char *)0, char *const envp[] */&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;execve&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; argv[], &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; envp[])&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;execlp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *filename, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *arg0, ... &lt;span class=&#34;comment&#34;&gt;/* (char *)0 */&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;execvp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *filename, &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; argv[])&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fexecve&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; argv[], &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; envp[])&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 7个函数返回值：若出错，返回-1；若成功，不返回 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当&lt;code&gt;filename&lt;/code&gt;作为参数时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果&lt;code&gt;filename&lt;/code&gt;中包含&lt;code&gt;/&lt;/code&gt;，则将其设为路径名；&lt;/li&gt;
&lt;li&gt;否则就按&lt;code&gt;PATH&lt;/code&gt;环境变量，在她所指定的各目录搜寻可执行文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;execl,execle,execlp(结尾带l)要在可变参数结尾添加&lt;code&gt;(char *)0&lt;/code&gt;。&lt;br&gt;execlp,execvp(结尾带p)表示第一个参数path不用输入完整路径，只有给出命令名即可，它会在环境变量PATH当中查找命令。&lt;br&gt;execv,execvp(不带l)表示命令所需的参数以char *arg[]形式给出且arg最后一个元素必须是NULL。&lt;/p&gt;
&lt;h1 id=&#34;更改用户ID和更改组ID&#34;&gt;&lt;a href=&#34;#更改用户ID和更改组ID&#34; class=&#34;headerlink&#34; title=&#34;更改用户ID和更改组ID&#34;&gt;&lt;/a&gt;更改用户ID和更改组ID&lt;/h1&gt;&lt;p&gt;可以用&lt;code&gt;setuid&lt;/code&gt;函数设置实际用户ID和有效用户ID；可以用&lt;code&gt;setgid&lt;/code&gt;函数设置实际组ID和有效组ID。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setuid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; uid)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setgit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt; gid)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;若进程拥有超级用户权限，则setuid函数将实际用户ID、有效用户ID以及保存的设置用户ID设置为uid；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若进程没有超级用户权限，但是uid等于实际用户ID或保存的设置用户ID，则&lt;code&gt;setuid&lt;/code&gt;只将有效用户ID设置为uid。不更改实际用户ID和保存的设置用户ID；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若以上两个条件都不满足，则&lt;code&gt;errno&lt;/code&gt;设置为&lt;code&gt;EPERM&lt;/code&gt;，并返回-1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只有超级用户进程可以更改实际用户ID；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;仅当对程序文件设置了设置用户ID位时，&lt;code&gt;exec&lt;/code&gt;函数才设置有效用户ID；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存的设置用户ID是由&lt;code&gt;ecec&lt;/code&gt;复制有效用户ID而得到的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;函数setreuid和setregid&#34;&gt;&lt;a href=&#34;#函数setreuid和setregid&#34; class=&#34;headerlink&#34; title=&#34;函数setreuid和setregid&#34;&gt;&lt;/a&gt;函数&lt;code&gt;setreuid&lt;/code&gt;和&lt;code&gt;setregid&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;功能是交换实际用户ID和有效用户ID&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setreuid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; ruid, &lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; euid)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setregid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt; rgid, &lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt; egid)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数的返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如若其中任一参数的值为-1，则表示相应的ID应当保持不变。&lt;/p&gt;
&lt;h2 id=&#34;函数seteuid和setegid&#34;&gt;&lt;a href=&#34;#函数seteuid和setegid&#34; class=&#34;headerlink&#34; title=&#34;函数seteuid和setegid&#34;&gt;&lt;/a&gt;函数&lt;code&gt;seteuid&lt;/code&gt;和&lt;code&gt;setegid&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;类似于&lt;code&gt;setuid&lt;/code&gt;和&lt;code&gt;setgid&lt;/code&gt;，但只更改有效用户ID和有效组ＩＤ。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;seteuid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; uid)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setegid&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; gid)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数的返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;函数system&#34;&gt;&lt;a href=&#34;#函数system&#34; class=&#34;headerlink&#34; title=&#34;函数system&#34;&gt;&lt;/a&gt;函数&lt;code&gt;system&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *cmdstring)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果&lt;code&gt;cmdstring&lt;/code&gt;是一个空指针，则仅当命令程序可用时，&lt;code&gt;system&lt;/code&gt;返回非0值，这一特征可以确定在一个给定的操作系统上是否支持&lt;code&gt;system&lt;/code&gt;函数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fork&lt;/code&gt;失败或者&lt;code&gt;waitpid&lt;/code&gt;返回处&lt;code&gt;EINTR&lt;/code&gt;之外的出错，则&lt;code&gt;system&lt;/code&gt;返回-1，并且设置&lt;code&gt;errno&lt;/code&gt;以指示错误类型。&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;exec&lt;/code&gt;失败，则返回值如同shell执行了&lt;code&gt;exit(127)&lt;/code&gt;一样。&lt;/li&gt;
&lt;li&gt;否则所有3个函数(&lt;code&gt;fork&lt;/code&gt;、&lt;code&gt;exec&lt;/code&gt;和&lt;code&gt;waitpid&lt;/code&gt;)都成功，那么&lt;code&gt;system&lt;/code&gt;的返回值是shell的终止状态，其格式已在&lt;code&gt;waitpid&lt;/code&gt;中说明。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;进程会计-process-accounting&#34;&gt;&lt;a href=&#34;#进程会计-process-accounting&#34; class=&#34;headerlink&#34; title=&#34;进程会计(process accounting)&#34;&gt;&lt;/a&gt;进程会计(process accounting)&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; u_short &lt;span class=&#34;keyword&#34;&gt;comp_t&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;/* 3-bit base 8 exponent; 13-bit fraction */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;acct&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; ac_flag;   &lt;span class=&#34;comment&#34;&gt;/* flag (see Figure 8.26) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; ac_stat;   &lt;span class=&#34;comment&#34;&gt;/* termination status (signal &amp;amp; core flag only) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;/* (Solaris only) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; ac_uid;   &lt;span class=&#34;comment&#34;&gt;/* real user ID */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt; ac_gid;   &lt;span class=&#34;comment&#34;&gt;/* real group ID */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;dev_t&lt;/span&gt; ac_tty;   &lt;span class=&#34;comment&#34;&gt;/* controlling terminal */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;time_t&lt;/span&gt; ac_btime; &lt;span class=&#34;comment&#34;&gt;/* starting calendar time */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;comp_t&lt;/span&gt; ac_utime; &lt;span class=&#34;comment&#34;&gt;/* user CPU time */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;comp_t&lt;/span&gt; ac_stime; &lt;span class=&#34;comment&#34;&gt;/* system CPU time */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;comp_t&lt;/span&gt; ac_etime; &lt;span class=&#34;comment&#34;&gt;/* elapsed time */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;comp_t&lt;/span&gt; ac_mem;  &lt;span class=&#34;comment&#34;&gt;/* average memory usage */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;comp_t&lt;/span&gt; ac_io;   &lt;span class=&#34;comment&#34;&gt;/* bytes transferred (by read and write) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;/* &#34;blocks&#34; on BSD systems */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;comp_t&lt;/span&gt; ac_rw;   &lt;span class=&#34;comment&#34;&gt;/* blocks read or written */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;/* (not present on BSD systems) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; ac_comm[&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;/* command name: [8] for Solaris, */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     &lt;span class=&#34;comment&#34;&gt;/* [10] for Mac OS X, [16] for FreeBSD, and */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     &lt;span class=&#34;comment&#34;&gt;/* [17] for Linux */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;我们不能获取永远不终止的进程的会计记录；&lt;/li&gt;
&lt;li&gt;在会计文件记录的顺序对应于进程终止的顺序，而不是它们启动的顺序；&lt;/li&gt;
&lt;li&gt;会计记录对应于进程而不是程序。&lt;code&gt;exec&lt;/code&gt;并不创建一个新的会计记录，但相应记录中的命令名称改变了，&lt;code&gt;AFORK&lt;/code&gt;标志被清除。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;用户标识&#34;&gt;&lt;a href=&#34;#用户标识&#34; class=&#34;headerlink&#34; title=&#34;用户标识&#34;&gt;&lt;/a&gt;用户标识&lt;/h1&gt;&lt;p&gt;得到运行该程序的用户的登录名，当有多个用户名对应着一个用户ID时，通常返回用户登录时用的用户名。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;getlogin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回指向登陆名字符串的指针；若出错，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;进程调度&#34;&gt;&lt;a href=&#34;#进程调度&#34; class=&#34;headerlink&#34; title=&#34;进程调度&#34;&gt;&lt;/a&gt;进程调度&lt;/h1&gt;&lt;p&gt;进程可以通过调整&lt;code&gt;nice&lt;/code&gt;值选择以最低优先级运行，只有特权进程允许提高调度权限。&lt;br&gt;&lt;code&gt;nice&lt;/code&gt;值的大小在0&lt;del&gt;(2*NZERO)-1之间，有些实现支持0&lt;/del&gt;2&lt;em&gt;NZERO。&lt;/em&gt;nice值越小，优先级越高*。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;nice&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; incr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*返回值：若成功，返回新的nice值NZERO；若出错，返回-18*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;getpriority&lt;/code&gt;函数可以像&lt;code&gt;nice&lt;/code&gt;函数那样用户获取进程的&lt;code&gt;nice&lt;/code&gt;值，但是&lt;code&gt;getpriority&lt;/code&gt;还可以获取一组相关进程的&lt;code&gt;nice&lt;/code&gt;值。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getpriority&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; which, &lt;span class=&#34;keyword&#34;&gt;id_t&lt;/span&gt; who)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回-NZERO~NZERO-1之间的nice值；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;setpriority&lt;/code&gt;函数可以用于为进程、进程组和属于特定用户ID的所有进程设置优先级。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setpriority&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; which, &lt;span class=&#34;keyword&#34;&gt;id_t&lt;/span&gt; who, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; value)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;进程时间&#34;&gt;&lt;a href=&#34;#进程时间&#34; class=&#34;headerlink&#34; title=&#34;进程时间&#34;&gt;&lt;/a&gt;进程时间&lt;/h1&gt;&lt;p&gt;&lt;code&gt;times&lt;/code&gt;函数获得它自己以及已终止子进程的墙上时钟时间、用户CPU时间和系统CPU时间。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/times.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;clock_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct tms *buf)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回墙上时钟时间(以时钟滴答数为单位)；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;tms&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;clock_t&lt;/span&gt; tms_utime;  &lt;span class=&#34;comment&#34;&gt;/* 用户CPU时间 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;clock_t&lt;/span&gt; tms_stime;  &lt;span class=&#34;comment&#34;&gt;/* 系统CPU时间 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;clock_t&lt;/span&gt; tms_cutime; &lt;span class=&#34;comment&#34;&gt;/* 子进程的用户CPU时间 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;clock_t&lt;/span&gt; tms_cstiem; &lt;span class=&#34;comment&#34;&gt;/* 子进程的系统CPU时间 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;















</content>
        <category term="Linux" />
        <category term="APUE" />
        <updated>2016-04-27T15:08:52.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.iakmai.com/2016/04/07/APUE_study_notes-process-environment/</id>
        <title>APUE学习笔记——进程环境</title>
        <link rel="alternate" href="https://blog.iakmai.com/2016/04/07/APUE_study_notes-process-environment/"/>
        <content type="html">&lt;h1 id=&#34;进程终止&#34;&gt;&lt;a href=&#34;#进程终止&#34; class=&#34;headerlink&#34; title=&#34;进程终止&#34;&gt;&lt;/a&gt;进程终止&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;退出函数&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; status)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; _Exit(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; status);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; _exit(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; status);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数&lt;code&gt;atexit&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;atexit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; (*func)(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，&lt;code&gt;atexit&lt;/code&gt;的参数是一个函数地址，当调用此函数时无需向它传递任何参数，也不期望它返回一个值。&lt;code&gt;exit&lt;/code&gt;调用这些函数的顺序与它们等级时候的顺序相反。同一函数如若登记多次也会被调用多次。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;环境表&#34;&gt;&lt;a href=&#34;#环境表&#34; class=&#34;headerlink&#34; title=&#34;环境表&#34;&gt;&lt;/a&gt;环境表&lt;/h1&gt;&lt;p&gt;环境表也是一个字符指针数组，其中每个指针包含一个以&lt;code&gt;null&lt;/code&gt;结束的C字符串的地址。全局变量&lt;code&gt;environ&lt;/code&gt;则包含了该指针的数组的地址：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; **environ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们称&lt;code&gt;environ&lt;/code&gt;为&lt;code&gt;环境指针(environment pointer)&lt;/code&gt;，指针数组为环境表，其中各指针指向的字符串为环境字符串。&lt;br&gt;通常用&lt;code&gt;getenv&lt;/code&gt;和&lt;code&gt;putenv&lt;/code&gt;函数来访问特定的环境变量，而不是&lt;code&gt;environ&lt;/code&gt;变量。&lt;/p&gt;
&lt;h1 id=&#34;C程序的存储空间布局&#34;&gt;&lt;a href=&#34;#C程序的存储空间布局&#34; class=&#34;headerlink&#34; title=&#34;C程序的存储空间布局&#34;&gt;&lt;/a&gt;C程序的存储空间布局&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;正文段。&lt;/li&gt;
&lt;li&gt;初始化数据段。&lt;/li&gt;
&lt;li&gt;未初始化数据段。&lt;/li&gt;
&lt;li&gt;栈。&lt;/li&gt;
&lt;li&gt;堆。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;存储空间分配&#34;&gt;&lt;a href=&#34;#存储空间分配&#34; class=&#34;headerlink&#34; title=&#34;存储空间分配&#34;&gt;&lt;/a&gt;存储空间分配&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;malloc&lt;/code&gt;，分配指定字节的存储区。此存储区中的初始值不确定。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calloc&lt;/code&gt;,为指定数量指定长度的对象分配存储空间。该空间中的每一位(bit)都初始化为0。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;realloc&lt;/code&gt;,增加或减少以前分配区的长度。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;calloc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; nobj, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;realloc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; nobj, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; newsize)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 3个函数返回值：若成功，返回非空指针；若出错，返回NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *ptr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;环境变量&#34;&gt;&lt;a href=&#34;#环境变量&#34; class=&#34;headerlink&#34; title=&#34;环境变量&#34;&gt;&lt;/a&gt;环境变量&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; **&lt;span class=&#34;title&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：指向与name关联的value的指针；若未找到，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;getenv&lt;/code&gt;,可以用其取环境变量值&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;putenv&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *str)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 函数返回值：若成功，返回0；若出错，返回非0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setenv&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *name, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *value, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; rewrite)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;unsetenv&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;putenv&lt;/code&gt;取形式为&lt;code&gt;name=value&lt;/code&gt;的字符串，将其放到环境中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setenv&lt;/code&gt;将&lt;code&gt;name&lt;/code&gt;设置为&lt;code&gt;value&lt;/code&gt;。如果在环境中&lt;code&gt;name&lt;/code&gt;已存在,那么(a)若&lt;code&gt;rewrite&lt;/code&gt;非0，则首先删除其现有的定义;(b)若&lt;code&gt;rewrite&lt;/code&gt;为0，则不删除其现有定义(&lt;code&gt;name&lt;/code&gt;不设置为新&lt;code&gt;value&lt;/code&gt;,而且也不出错)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsetenv&lt;/code&gt;删除&lt;code&gt;name&lt;/code&gt;的定义。即使不存在这种定义与不出错。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;函数setjmp和longjmp&#34;&gt;&lt;a href=&#34;#函数setjmp和longjmp&#34; class=&#34;headerlink&#34; title=&#34;函数setjmp和longjmp&#34;&gt;&lt;/a&gt;函数&lt;code&gt;setjmp&lt;/code&gt;和&lt;code&gt;longjmp&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;setjmp.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setjmp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(jmp_buf env)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若直接调用，返回0；若从longjmp返回，则为非0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;longjmp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(jmp_buf env, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在希望返回到的位置调用&lt;code&gt;setjmp&lt;/code&gt;。当调用&lt;code&gt;longjmp&lt;/code&gt;是，第一个参数是调用&lt;code&gt;setjmp&lt;/code&gt;时的&lt;code&gt;env&lt;/code&gt;;第二个参数是具有非0值的&lt;code&gt;val&lt;/code&gt;,它将称为从&lt;code&gt;setjmp&lt;/code&gt;处返回的值。&lt;br&gt;在课本的&lt;a href=&#34;https://github.com/kaiiak/APUE/blob/master/chapter7/7.13.c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;例程7.13&lt;/a&gt;中，全局变量、静态变量和易失变量(volatile variables)不受优化的影响。如果要编写一个使用非局部跳转的可移植程序，则必须使用&lt;code&gt;volatile&lt;/code&gt;属性。但是一个系统移植到另一个系统，其他任何事情都可能改变。&lt;/p&gt;
&lt;h1 id=&#34;函数getrlimit和setrlimit&#34;&gt;&lt;a href=&#34;#函数getrlimit和setrlimit&#34; class=&#34;headerlink&#34; title=&#34;函数getrlimit和setrlimit&#34;&gt;&lt;/a&gt;函数&lt;code&gt;getrlimit&lt;/code&gt;和&lt;code&gt;setrlimit&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getrlimit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; resource, struct rlimit *rlptr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setrlimit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; resource, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; struct rlimit *rlptr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回0；若出错，返回非0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个函数的每一次调用都指定一个资源以及一个指向下列结构的指针。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rlimit&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;rlim_t&lt;/span&gt; rlim_cur;    &lt;span class=&#34;comment&#34;&gt;/* soft limit: current limit */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;rlim_t&lt;/span&gt; rlim_max;    &lt;span class=&#34;comment&#34;&gt;/* hard limit: maximum value for rlim_cur */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;任何一个进程都可以将一个限制值更改为小于或等于其硬限制值。&lt;/li&gt;
&lt;li&gt;任何一个进程都可以降低其硬限制值，但它必须大于或等于其软限制值。&lt;/li&gt;
&lt;li&gt;只有超级用户进程才可以提高硬限制值。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Linux" />
        <category term="APUE" />
        <updated>2016-04-07T15:35:06.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.iakmai.com/2016/03/29/APUE_study_notes-standard_IO_libray/</id>
        <title>APUE学习笔记——格式化I/O</title>
        <link rel="alternate" href="https://blog.iakmai.com/2016/03/29/APUE_study_notes-standard_IO_libray/"/>
        <content type="html">&lt;h1 id=&#34;流和FILE对象&#34;&gt;&lt;a href=&#34;#流和FILE对象&#34; class=&#34;headerlink&#34; title=&#34;流和FILE对象&#34;&gt;&lt;/a&gt;流和FILE对象&lt;/h1&gt;&lt;p&gt;对于&lt;code&gt;ASCII&lt;/code&gt;字符集，一个字符用于一个字节表示。对于国际字符集，一个字符可用于多个字节表示。标准I/O文件流可用于单字节或多字节(“宽”)字符集。流的定向(stream’s orientation)决定了所读、所写的字符是单字节还是多字节。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;wchar.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fwide&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 返回值：若流是宽定向的，返回正值；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 若流是字节定向的，返回负值；若流是未定向的，返回0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 如果mode参数值为负，fwide将试图使指定的流是字节定向的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 如果mode参数值为正，fwide将试图使指定的流是宽定向的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 如果mode参数值为0，fwide将不试图设置流的定向，但返回标识该流定向的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;标准输入、标准输出和标准错误&#34;&gt;&lt;a href=&#34;#标准输入、标准输出和标准错误&#34; class=&#34;headerlink&#34; title=&#34;标准输入、标准输出和标准错误&#34;&gt;&lt;/a&gt;标准输入、标准输出和标准错误&lt;/h1&gt;&lt;p&gt;可以通过预定义文件指针&lt;code&gt;stdin&lt;/code&gt;、&lt;code&gt;stdout&lt;/code&gt;和&lt;code&gt;stderr&lt;/code&gt;加以引用。&lt;/p&gt;
&lt;h1 id=&#34;缓冲&#34;&gt;&lt;a href=&#34;#缓冲&#34; class=&#34;headerlink&#34; title=&#34;缓冲&#34;&gt;&lt;/a&gt;缓冲&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;全缓冲。在这种情况下，在填满标准I/O缓冲区才进行实际I/O操作。&lt;pre&gt;&lt;code&gt;冲洗(flush)说明标准I/O缓冲区的写操作。也可以直接调用`fflush`函数冲洗一个流。在终端驱动程序中，`flush(刷清)`表示丢弃已存储在缓冲区中的数据。&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;行缓冲。在这种情况下，当在输入和输出中遇到换行符时，标准I/O库执行I/O操作。&lt;/li&gt;
&lt;li&gt;不带缓冲。标准I/O库不对字符进行缓冲存储。标准错误流&lt;code&gt;stderr&lt;/code&gt;通常是不带缓冲的。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setbuf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp, &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setvbuf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp, &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; mode, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 返回值：若成功，返回0；若出错，返回非0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个函数可用于更改缓冲类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_IOFBF&lt;/code&gt; 全缓冲 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IOLBF&lt;/code&gt; 行缓冲&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IONBF&lt;/code&gt; 不带缓冲&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fflush&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若出错，返回EOF */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;打开流&#34;&gt;&lt;a href=&#34;#打开流&#34; class=&#34;headerlink&#34; title=&#34;打开流&#34;&gt;&lt;/a&gt;打开流&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;FILE *&lt;span class=&#34;title&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; ptahname, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; type)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;FILE *&lt;span class=&#34;title&#34;&gt;freopen&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; pathname, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; type, FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;FILE *&lt;span class=&#34;title&#34;&gt;fdopen&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *type)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 3个函数的返回值：若成功，返回文件指针；若出错，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fopen&lt;/code&gt;函数打开路径名为&lt;code&gt;pathname&lt;/code&gt;的一个指定的文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;freopen&lt;/code&gt;函数在一个指定的流上打开一个指定的文件，如若该流已经打开，则先关闭该流。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fdopen&lt;/code&gt;函数取一个已有的文件描述符，并使一个标准的I/O流与该描述符相结合。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;调用&lt;code&gt;fclose&lt;/code&gt;关闭一个打开的流。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若返回，返回EOF */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;在该文件被关闭之前，冲洗缓冲区中的输出数据。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;读和写流&#34;&gt;&lt;a href=&#34;#读和写流&#34; class=&#34;headerlink&#34; title=&#34;读和写流&#34;&gt;&lt;/a&gt;读和写流&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;输入函数&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fgetc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getchar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 3个函数的返回值：若成功，返回下一个字符；若已到达文件尾端或出错，返回EOF */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
函数&lt;code&gt;getchar&lt;/code&gt;等同于&lt;code&gt;getc(stdin)&lt;/code&gt;。前两个函数的区别是，&lt;code&gt;getc&lt;/code&gt;可被实现为宏，而&lt;code&gt;fgetc&lt;/code&gt;不能实现为宏。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ferror&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;feof&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若条件为真，返回非0(真)；否则，返回0(假) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;clearerr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了区别是到达文件结尾还是出错。&lt;br&gt;例程&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FILE*stream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/*openafileforwriting*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    stream=&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fopen(&lt;span class=&#34;string&#34;&gt;&#34;DUMMY.FIL&#34;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&#34;w&#34;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/*forceanerrorconditionbyattemptingtoread*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    getc(stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(ferror(stream))&lt;span class=&#34;comment&#34;&gt;/*testforanerroronthestream*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/*displayanerrormessage*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#34;ErrorreadingfromDUMMY.FIL\n&#34;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/*resettheerrorandEOFindicators*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    clearerr(stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fclose(stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;从流中读取数据后，可以调用&lt;code&gt;ungetc&lt;/code&gt;将字符再压送回流中。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ungetc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; c, FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回c；若出错，返回EOF */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;输出函数&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;putc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; c, FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fputc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; c, FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;putchar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 3个函数返回值：若成功，返回c;若出错，返回EOF */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;每次一行I-O&#34;&gt;&lt;a href=&#34;#每次一行I-O&#34; class=&#34;headerlink&#34; title=&#34;每次一行I/O&#34;&gt;&lt;/a&gt;每次一行I/O&lt;/h1&gt;&lt;p&gt;下面两个函数提供每次输入一行的功能。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;fgets&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n, FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;gets&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *buf)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回buf；若已到达文件尾端或出错，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;fgets&lt;/code&gt;函数一直读到下一个换行符为止，但是不超过n-1个字符，读入的字符被送入缓冲区。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fputs&lt;/code&gt;和&lt;code&gt;puts&lt;/code&gt;提供每次输入一行的功能。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fputs&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; str, FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *str)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回非负值；若出错，返回EOF */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数&lt;code&gt;fputs&lt;/code&gt;将一个以null字节终止的字符串写到指定的流，尾端的终止符null不写出。&lt;/p&gt;
&lt;h1 id=&#34;二进制I-O&#34;&gt;&lt;a href=&#34;#二进制I-O&#34; class=&#34;headerlink&#34; title=&#34;二进制I/O&#34;&gt;&lt;/a&gt;二进制I/O&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fread&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; ptr, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; nboj, FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fwrite&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; ptr, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; nobj, FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数的返回值：读或写的对象数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;指定size为每个数组元素的长度，nobj为欲写元素个数&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 写数组 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; data[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fwrite(&amp;amp;data[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, fp) != &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    err_sys(&lt;span class=&#34;string&#34;&gt;&#34;fwrite error&#34;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 写一个结构体 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    short   count;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt;    total;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt;    name[NAMESIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; item;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fwrite(&amp;amp;item, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(item), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, fp) != &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    err_sys(&lt;span class=&#34;string&#34;&gt;&#34;fwrite error&#34;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;使用二进制I/O的基本问题，它只能用于读在同一个系统上已写的数据&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;定位流-Positioning-a-Stream&#34;&gt;&lt;a href=&#34;#定位流-Positioning-a-Stream&#34; class=&#34;headerlink&#34; title=&#34;定位流(Positioning a Stream)&#34;&gt;&lt;/a&gt;定位流(Positioning a Stream)&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ftell&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回当前文件位置指示；若出错，返回-1L */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fseek&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp, &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; offset, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; whence)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rewind&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;whence&lt;/code&gt;的值与&lt;code&gt;lseek&lt;/code&gt;函数的相同：&lt;code&gt;SEEK_SET&lt;/code&gt;表示从文件的起始位置开始，&lt;code&gt;SEEK_CUR&lt;/code&gt;表示从当前文件位置开始，&lt;code&gt;SEEK_END&lt;/code&gt;表示从文件的尾端开始。&lt;code&gt;offset&lt;/code&gt;，文件偏移量。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;off_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ftello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回当前文件位置；若出错，返回(off_t)-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fseeko&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp, &lt;span class=&#34;keyword&#34;&gt;off_t&lt;/span&gt; offset, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; whence)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fgetpos&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp, &lt;span class=&#34;keyword&#34;&gt;fpos_t&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fsetpos&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *fp, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;fpos_t&lt;/span&gt; *pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回0；若出错，返回非0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;格式化I-O&#34;&gt;&lt;a href=&#34;#格式化I-O&#34; class=&#34;headerlink&#34; title=&#34;格式化I/O&#34;&gt;&lt;/a&gt;格式化I/O&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;格式化输出&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, ...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, ...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, ...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 3个函数返回值：若成功，返回输入字符数；若出错，返回负值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, ...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回输入数组的字符数；若编码出错，返回负值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;snprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; n, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, ...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若缓冲区足够大，返回将要存入数组的字符数；若编码出错，返回负值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;printf将格式化数据写到标准输出，fprintf写至指定的流，dprintf写至制定的文件描述符，sprintf将格式化的字符送入数组buf。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面5种&lt;code&gt;printf&lt;/code&gt;族的变体，将可变参数表(…)替换成了arg。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;vprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, va_list arg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;vfprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, va_list arg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;vdprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, va_list arg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 3个函数返回值：若成功，返回输入字符数；若出错，返回负值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;vsprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, va_list arg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回输入数组的字符数；若编码出错，返回负值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;vsnprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; n, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, va_list arg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若缓冲区足够大，返回将要存入数组的字符数；若编码出错，返回负值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;格式化输入&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, ...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fscanf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; fp, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, ...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sscanf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; format, ...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 3个函数返回值：赋值的输入项数；若输入出错或在任一转换前已到达文件尾端，返回EOF */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;临时文件&#34;&gt;&lt;a href=&#34;#临时文件&#34; class=&#34;headerlink&#34; title=&#34;临时文件&#34;&gt;&lt;/a&gt;临时文件&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;tmpnam&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *ptr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：指向唯一路径名的指针 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;FILE *&lt;span class=&#34;title&#34;&gt;tmpfile&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回文件指针；若出错，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;tmpnam&lt;/code&gt;函数产生一个与现有文件名不同的一个有效路径名字符串。如果&lt;code&gt;ptr&lt;/code&gt;是NULL，则产生的路径名存放在一个静态区中，指向该静态区的指针作为函数值返回。后续调用&lt;code&gt;tmpnam&lt;/code&gt;会从写该静态区。如过&lt;code&gt;ptr&lt;/code&gt;不是NULL，则认为它应该指向长度至少是&lt;code&gt;L_tmpnam&lt;/code&gt;个字符的数组。所产生的路径名存放在该数组中，&lt;code&gt;ptr&lt;/code&gt;也作为函数值返回。&lt;br&gt;&lt;code&gt;tmpfile&lt;/code&gt;创建一个临时二进制文件(wb+)，在关闭该文件或程序结束时将自动删除这种文件。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;mkdtemp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回指向目录名的指针；若出错，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mkstemp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回文件描述符；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;mkdtemp&lt;/code&gt;函数创建了一个目录，该目录有唯一的名字；&lt;code&gt;mkstemp&lt;/code&gt;函数创建了一个文件，该文件有一个唯一的名字。&lt;strong&gt;名字是通过template字符串进行选择的。这个字符串后6位设置为XXXXXX的路径名。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;内存流&#34;&gt;&lt;a href=&#34;#内存流&#34; class=&#34;headerlink&#34; title=&#34;内存流&#34;&gt;&lt;/a&gt;内存流&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;FILE *&lt;span class=&#34;title&#34;&gt;fmemopen&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; type)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回流指针；若出错，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;fmemopen&lt;/code&gt;函数允许调用者提供缓冲区用于内存流：&lt;code&gt;buf&lt;/code&gt;参数指向缓冲区的开始位置，&lt;code&gt;size&lt;/code&gt;参数指定了缓冲区大小的字节数。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;FILE *&lt;span class=&#34;title&#34;&gt;open_memstream&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; **bufp, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; *sizep)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;wchar.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;FILE *&lt;span class=&#34;title&#34;&gt;open_wmemstream&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;wchar_t&lt;/span&gt; **bufp, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; *sizep)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数的返回值：若成功，返回流指针；若出错，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;open_memstream&lt;/code&gt;函数创建的流是面向字节的，&lt;code&gt;open_wmemstream&lt;/code&gt;函数创建的流是面向宽字节的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建的流只能打开；&lt;/li&gt;
&lt;li&gt;不能指定自己的缓冲区，但可以分别通过&lt;code&gt;bufp&lt;/code&gt;和&lt;code&gt;sizep&lt;/code&gt;参数访问缓冲区地址和大小；&lt;/li&gt;
&lt;li&gt;关闭后需要自行释放缓冲区；&lt;/li&gt;
&lt;li&gt;对流添加字节会增加缓冲区大小。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Linux" />
        <category term="APUE" />
        <updated>2016-03-29T13:53:18.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.iakmai.com/2016/02/29/APUE_study_notes-Files_and_Directories/</id>
        <title>APUE学习笔记——文件和目录</title>
        <link rel="alternate" href="https://blog.iakmai.com/2016/02/29/APUE_study_notes-Files_and_Directories/"/>
        <content type="html">&lt;h1 id=&#34;函数stat、fstat、fstatat、lstat&#34;&gt;&lt;a href=&#34;#函数stat、fstat、fstatat、lstat&#34; class=&#34;headerlink&#34; title=&#34;函数stat、fstat、fstatat、lstat&#34;&gt;&lt;/a&gt;函数&lt;code&gt;stat&lt;/code&gt;、&lt;code&gt;fstat&lt;/code&gt;、&lt;code&gt;fstatat&lt;/code&gt;、&lt;code&gt;lstat&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;stat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; pathname, struct stat *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fstat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, struct stat *buf)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lstat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; pathname, struct stat *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lstat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; pathname, struct stat *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; flag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 所有4个函数的返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sturct stat &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;mode_t&lt;/span&gt;          st_mode;        &lt;span class=&#34;comment&#34;&gt;/* file type &amp;amp; mode (permissions) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;ino_t&lt;/span&gt;           st_ino;         &lt;span class=&#34;comment&#34;&gt;/* i-node number (serial number) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;dev_t&lt;/span&gt;           st_dev;         &lt;span class=&#34;comment&#34;&gt;/* device number (file system) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;dev_t&lt;/span&gt;           st_rdev;        &lt;span class=&#34;comment&#34;&gt;/* device number for special files */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;nlink_t&lt;/span&gt;         st_nlink;       &lt;span class=&#34;comment&#34;&gt;/* number of links */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt;           st_uid;         &lt;span class=&#34;comment&#34;&gt;/* user ID of links */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt;           st_gid;         &lt;span class=&#34;comment&#34;&gt;/* group ID of owner */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;off_t&lt;/span&gt;           st_size;        &lt;span class=&#34;comment&#34;&gt;/* size in bytes, for regular files  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;timespec&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;st_atime&lt;/span&gt;;&lt;/span&gt;       &lt;span class=&#34;comment&#34;&gt;/* time of last access */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;timespec&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;st_mtime&lt;/span&gt;;&lt;/span&gt;       &lt;span class=&#34;comment&#34;&gt;/* time of last modification */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;timespec&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;st_ctime&lt;/span&gt;;&lt;/span&gt;       &lt;span class=&#34;comment&#34;&gt;/* time of last file status change */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;blksize_t&lt;/span&gt;       st_blksize;     &lt;span class=&#34;comment&#34;&gt;/* best I/O block size */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;blkcnt_t&lt;/span&gt;        st_blocks;      &lt;span class=&#34;comment&#34;&gt;/* number of disk blocks allocated */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;函数&lt;code&gt;stat&lt;/code&gt;:返回&lt;code&gt;pathname&lt;/code&gt;命名文件有关的信息结构；&lt;/li&gt;
&lt;li&gt;函数&lt;code&gt;fstat&lt;/code&gt;:返回在描述符&lt;code&gt;fd&lt;/code&gt;上打开文件的有关信息；&lt;/li&gt;
&lt;li&gt;函数&lt;code&gt;lstat&lt;/code&gt;:类似于函数&lt;code&gt;stat&lt;/code&gt;，但当命名的文件是一个符号链接时，&lt;code&gt;lstat&lt;/code&gt;返回该符号连接的有关信息；&lt;/li&gt;
&lt;li&gt;函数&lt;code&gt;fstatat&lt;/code&gt;:为一个相对于当前打开目录(由&lt;code&gt;fd&lt;/code&gt;参数指向)的路径名返回文件统计信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件信息包含&lt;code&gt;stat&lt;/code&gt;结构的&lt;code&gt;st_mode&lt;/code&gt;成员中。可以下表中的宏文件确定文件的类型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;文件类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISREG()&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;普通文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISDIR()&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;目录文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISCHR()&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;字符特殊文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISBLK()&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;块特殊文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISFIFO()&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;管道或FIFO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISLNK()&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;符号链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISSOCK()&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;套接字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;文件类型&#34;&gt;&lt;a href=&#34;#文件类型&#34; class=&#34;headerlink&#34; title=&#34;文件类型&#34;&gt;&lt;/a&gt;文件类型&lt;/h1&gt;&lt;p&gt;文件类型包括如下几类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;普通文件(regular file):包含了某种形式的数据；&lt;/li&gt;
&lt;li&gt;目录文件(directory file):包含了其他文件的名字以及指向与这些文件有关信息的指针；&lt;/li&gt;
&lt;li&gt;块特殊文件(block special file):该类型文件提供对设备(如磁盘)带缓冲的访问，每次访问以固定长度为单位进行；&lt;/li&gt;
&lt;li&gt;字符特殊文件(character special file):该文件提供对设备不带缓冲的访问，每次访问长度不变。系统中的所有设备要么是字符特殊文件，要么是块特殊文件。&lt;/li&gt;
&lt;li&gt;FIFO:该文件用于进程通信，也称为命名管道(named pipe)；&lt;/li&gt;
&lt;li&gt;套接字(socket)：该文件用于进程间的网络通信，也可以用在一台宿主机上进程间的非网络通信。&lt;/li&gt;
&lt;li&gt;符号链接(symbolic link):该文件指向另一个文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;设置用户ID和设置组ID&#34;&gt;&lt;a href=&#34;#设置用户ID和设置组ID&#34; class=&#34;headerlink&#34; title=&#34;设置用户ID和设置组ID&#34;&gt;&lt;/a&gt;设置用户ID和设置组ID&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;实际用户ID和实际组ID标识我们究竟是谁。&lt;/li&gt;
&lt;li&gt;有效用户ID、有效组ID以及附属组ID决定了我们的文件访问权限。&lt;/li&gt;
&lt;li&gt;保存的设置用户ID和保存的设置组ID在执行一个程序时包含了有效用户ID和有效组ID的副本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个文件有一个所有者和组所有者，所有者由&lt;code&gt;stat&lt;/code&gt;结构中的&lt;code&gt;st_uid&lt;/code&gt;指定，组所有者则由&lt;code&gt;st_gid&lt;/code&gt;指定。&lt;/p&gt;
&lt;h1 id=&#34;文件访问权限&#34;&gt;&lt;a href=&#34;#文件访问权限&#34; class=&#34;headerlink&#34; title=&#34;文件访问权限&#34;&gt;&lt;/a&gt;文件访问权限&lt;/h1&gt;&lt;p&gt;所有文件类型(目录、字符特别文件等)都有访问权限(access permisiion)。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;st_mode&lt;/code&gt;屏蔽&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IRUSR&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户都&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IWUSR&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IXUSR&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IRGRP&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IWGRP&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IXGRP&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IROTH&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IWOTH&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IXOTH&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;函数access和faccessat&#34;&gt;&lt;a href=&#34;#函数access和faccessat&#34; class=&#34;headerlink&#34; title=&#34;函数access和faccessat&#34;&gt;&lt;/a&gt;函数&lt;code&gt;access&lt;/code&gt;和&lt;code&gt;faccessat&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;access&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;faccessat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; mode, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; flag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数的返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;access&lt;/code&gt;和&lt;code&gt;faccessat&lt;/code&gt;函数是按实际用户ID和实际组ID进行访问权限测试的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;R_OK&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;测试读权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;W_OK&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;测试写权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;X_OK&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;测试执行权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;函数umask&#34;&gt;&lt;a href=&#34;#函数umask&#34; class=&#34;headerlink&#34; title=&#34;函数umask&#34;&gt;&lt;/a&gt;函数&lt;code&gt;umask&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;&lt;code&gt;umask&lt;/code&gt;函数为进程设置文件模式创建屏蔽字(mask for the process)，并返回之前的值。(这是少数几个没有出错返回函数中的一个。)&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mode_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;umask&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;mode_t&lt;/span&gt; cmask)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：之前的文件模式穿件屏蔽字 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数&lt;code&gt;cmask&lt;/code&gt;是由上上个表列出的9个常量(S_IRUSR、S_IWUSR等)中若干个按位“或”构成的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;屏蔽位&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0400&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0200&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0040&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0020&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0010&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0004&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0002&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0001&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;函数chmod、fchmod和fchmodat&#34;&gt;&lt;a href=&#34;#函数chmod、fchmod和fchmodat&#34; class=&#34;headerlink&#34; title=&#34;函数chmod、fchmod和fchmodat&#34;&gt;&lt;/a&gt;函数&lt;code&gt;chmod&lt;/code&gt;、&lt;code&gt;fchmod&lt;/code&gt;和&lt;code&gt;fchmodat&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;chomd&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;mode_t&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fchome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;mode_t&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fchomdat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;mode_t&lt;/span&gt; mode, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; flag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 3个函数返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;chmod&lt;/code&gt;函数在指定的文件上进行操作，而&lt;code&gt;fchmod&lt;/code&gt;函数则对已打开的文件进行操作。&lt;br&gt;&lt;code&gt;fchomdat&lt;/code&gt;函数与&lt;code&gt;chmod&lt;/code&gt;函数在下面两种情况下是相同的：一种是&lt;code&gt;pathname&lt;/code&gt;参数为绝对路径，另一种是&lt;code&gt;fd&lt;/code&gt;参数取值为&lt;code&gt;AT_FDCWD&lt;/code&gt;而&lt;code&gt;pathname&lt;/code&gt;参数为相对路径。否则，&lt;code&gt;fchmodat&lt;/code&gt;计算相对于打开目录(由&lt;code&gt;fd&lt;/code&gt;参数指向)的pathname。&lt;code&gt;flag&lt;/code&gt;参数可以用于改变&lt;code&gt;fchmodat&lt;/code&gt;的行为，当设置了&lt;code&gt;AT_SYMLIN_NOFOLLOW&lt;/code&gt;标志时，&lt;code&gt;fchmodat&lt;/code&gt;并不会跟随符号链接。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISUID&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;执行时设置用户ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISGID&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;执行时设置组ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_ISVTX&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;保存正文(粘着位)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IRWXU&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户(所有者)读、写和执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IRUSR&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户(所有者)读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IWUSR&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户(所有者)写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IXUSR&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户(所有者)执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IRWXG&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组读、写和执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IRGRP&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IWGRP&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IXGRP&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IRWXO&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他读、写和执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IROTH&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IWOTH&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S_IXOTH&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;其他执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;粘着位-sticky-bit&#34;&gt;&lt;a href=&#34;#粘着位-sticky-bit&#34; class=&#34;headerlink&#34; title=&#34;粘着位(sticky bit)&#34;&gt;&lt;/a&gt;粘着位(sticky bit)&lt;/h1&gt;&lt;p&gt;&lt;code&gt;S_ISVTX&lt;/code&gt;位被称为&lt;code&gt;粘着位&lt;/code&gt;：如果一个可执行的程序文件的这一位被设置了，那么当程序第一次被执行，在其终止时，程序正文的一个副本仍被保存在交换区。&lt;br&gt;后来的UNIX版本称为它为&lt;code&gt;保存正文位(saved-text bit)&lt;/code&gt;，因此也就有了常量&lt;code&gt;S_ISVTX&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;函数chown、fchown、fchownat和lchown&#34;&gt;&lt;a href=&#34;#函数chown、fchown、fchownat和lchown&#34; class=&#34;headerlink&#34; title=&#34;函数chown、fchown、fchownat和lchown&#34;&gt;&lt;/a&gt;函数&lt;code&gt;chown&lt;/code&gt;、&lt;code&gt;fchown&lt;/code&gt;、&lt;code&gt;fchownat&lt;/code&gt;和&lt;code&gt;lchown&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;下面几个&lt;code&gt;chown&lt;/code&gt;函数可用于更改文件的用户ID和组ID。如果两个参数&lt;code&gt;owner&lt;/code&gt;或&lt;code&gt;group&lt;/code&gt;中的任意一个是-1，则对应的ID不变。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;chown&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; owner, &lt;span class=&#34;keyword&#34;&gt;git_t&lt;/span&gt; group)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fchown&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; owner, &lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt; group)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fchownat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; owner, &lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt; group, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; flag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lchown&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;uid_t&lt;/span&gt; owner, &lt;span class=&#34;keyword&#34;&gt;gid_t&lt;/span&gt; group)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 4个函数的返回值：若辰宫，返回0；若出错，返回-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;文件长度&#34;&gt;&lt;a href=&#34;#文件长度&#34; class=&#34;headerlink&#34; title=&#34;文件长度&#34;&gt;&lt;/a&gt;文件长度&lt;/h1&gt;&lt;p&gt;&lt;code&gt;stat&lt;/code&gt;结构成员&lt;code&gt;st_size&lt;/code&gt;表示以字节为单位的单位长度。只对普通文件、目录文件和符号连接有效。&lt;/p&gt;
&lt;h1 id=&#34;文件中的空洞&#34;&gt;&lt;a href=&#34;#文件中的空洞&#34; class=&#34;headerlink&#34; title=&#34;文件中的空洞&#34;&gt;&lt;/a&gt;文件中的空洞&lt;/h1&gt;&lt;p&gt;空洞是由所设置的偏移量超过文件端尾，并写入了某些数据后造成的。&lt;/p&gt;
&lt;h1 id=&#34;文件截断&#34;&gt;&lt;a href=&#34;#文件截断&#34; class=&#34;headerlink&#34; title=&#34;文件截断&#34;&gt;&lt;/a&gt;文件截断&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;truncate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;off_t&lt;/span&gt; length)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ftruncate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;off_t&lt;/span&gt; length)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 两个函数的返回值：若成功，返回0；若失败，返回-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果该文件以前的长度大于&lt;code&gt;length&lt;/code&gt;，则超过&lt;code&gt;length&lt;/code&gt;以外的数据就不能再访问。如果以前的长度小于&lt;code&gt;length&lt;/code&gt;，文件长度将增加，在以前的文件尾端和新的文件尾端之间的数据将读作0。&lt;/p&gt;
&lt;h1 id=&#34;文件系统&#34;&gt;&lt;a href=&#34;#文件系统&#34; class=&#34;headerlink&#34; title=&#34;文件系统&#34;&gt;&lt;/a&gt;文件系统&lt;/h1&gt;&lt;h1 id=&#34;函数link、linkat、unlink、unlinkat和remove&#34;&gt;&lt;a href=&#34;#函数link、linkat、unlink、unlinkat和remove&#34; class=&#34;headerlink&#34; title=&#34;函数link、linkat、unlink、unlinkat和remove&#34;&gt;&lt;/a&gt;函数&lt;code&gt;link&lt;/code&gt;、&lt;code&gt;linkat&lt;/code&gt;、&lt;code&gt;unlink&lt;/code&gt;、&lt;code&gt;unlinkat&lt;/code&gt;和&lt;code&gt;remove&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *existingpath, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *newpath)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;linkat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; efd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *existingpath, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; nfd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *newpath, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; flag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数的返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这两个函数创建一个新目录项&lt;code&gt;newpath&lt;/code&gt;，它引用现有文件&lt;code&gt;existingpath&lt;/code&gt;。如果&lt;code&gt;newpath&lt;/code&gt;已存在，则返回出错。&lt;br&gt;对于&lt;code&gt;linkat&lt;/code&gt;函数，现有文件是通过&lt;code&gt;efd&lt;/code&gt;和&lt;code&gt;existingpath&lt;/code&gt;指定，新的路径名是通过&lt;code&gt;nfd&lt;/code&gt;和&lt;code&gt;newpath&lt;/code&gt;指定的。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;unlink&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;unlinkat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; flag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数的返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这两个函数删除目录项，并将由&lt;code&gt;pathname&lt;/code&gt;所引用的链接数减1。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若失败，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;函数rename和renameat&#34;&gt;&lt;a href=&#34;#函数rename和renameat&#34; class=&#34;headerlink&#34; title=&#34;函数rename和renameat&#34;&gt;&lt;/a&gt;函数&lt;code&gt;rename&lt;/code&gt;和&lt;code&gt;renameat&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rename&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *oldname, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *newname)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;renameat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; oldfd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *oldname, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; newfd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *newname)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;如果&lt;code&gt;oldname&lt;/code&gt;指的是一个文件而不是目录，那么为该文件或符号连接重命名。&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;oldname&lt;/code&gt;指的是一个空目录，那么为该目录重命名。&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;oldname&lt;/code&gt;或&lt;code&gt;newname&lt;/code&gt;引用符号连接，则处理的是符号链接本身，而不是它引用的文件。&lt;/li&gt;
&lt;li&gt;不能对&lt;code&gt;.&lt;/code&gt;和&lt;code&gt;..&lt;/code&gt;重命名。&lt;/li&gt;
&lt;li&gt;作为一个特例，如果&lt;code&gt;oldname&lt;/code&gt;和&lt;code&gt;newname&lt;/code&gt;引用同意文件，则函数不做任何更改而成功返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;符号链接&#34;&gt;&lt;a href=&#34;#符号链接&#34; class=&#34;headerlink&#34; title=&#34;符号链接&#34;&gt;&lt;/a&gt;符号链接&lt;/h1&gt;&lt;p&gt;符号链接是对一个文件的间接指针。符号链接以及它指向何种对象并无任何文件系统限制，任何用户都可以创建指向目录的符号连接。&lt;/p&gt;
&lt;h1 id=&#34;创建和读取符号连接&#34;&gt;&lt;a href=&#34;#创建和读取符号连接&#34; class=&#34;headerlink&#34; title=&#34;创建和读取符号连接&#34;&gt;&lt;/a&gt;创建和读取符号连接&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;symlink&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *actualpath, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *sympath)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;symlinat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *acutalpath, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *symptah)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数的返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;readlink&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *actualpath, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *symptah)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;sszie_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;readlinkat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt;* &lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; pathname, &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;restrict&lt;/span&gt; buf, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; bufsize)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数的返回值：若成功，返回读取的字节数；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;文件时间&#34;&gt;&lt;a href=&#34;#文件时间&#34; class=&#34;headerlink&#34; title=&#34;文件时间&#34;&gt;&lt;/a&gt;文件时间&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;例子&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ls(1)选项&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;st_atim&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;文件数据的最后访问时间&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;-u&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;st_mtim&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;文件数据的最后修改时间&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;默认&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;st_ctim&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;i节点状态的最后更改时间&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;chomd、chown&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;函数futimens、utimensat和utimes&#34;&gt;&lt;a href=&#34;#函数futimens、utimensat和utimes&#34; class=&#34;headerlink&#34; title=&#34;函数futimens、utimensat和utimes&#34;&gt;&lt;/a&gt;函数&lt;code&gt;futimens&lt;/code&gt;、&lt;code&gt;utimensat&lt;/code&gt;和&lt;code&gt;utimes&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;futimens&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; struct timespec times[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;utimensat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *path, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; struct timespec times[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; flag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;函数mkdir、mkdirat和rmdir&#34;&gt;&lt;a href=&#34;#函数mkdir、mkdirat和rmdir&#34; class=&#34;headerlink&#34; title=&#34;函数mkdir、mkdirat和rmdir&#34;&gt;&lt;/a&gt;函数&lt;code&gt;mkdir&lt;/code&gt;、&lt;code&gt;mkdirat&lt;/code&gt;和&lt;code&gt;rmdir&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;两个函数创建一个新目录。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mkdir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;mode_t&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mkdir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname, &lt;span class=&#34;keyword&#34;&gt;mode_t&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用&lt;code&gt;rmdir&lt;/code&gt;函数可以创建一个空目录。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rmdir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若失败，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h1 id=&#34;读目录&#34;&gt;&lt;a href=&#34;#读目录&#34; class=&#34;headerlink&#34; title=&#34;读目录&#34;&gt;&lt;/a&gt;读目录&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;dirent.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;DIR *&lt;span class=&#34;title&#34;&gt;opendir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;DIR *&lt;span class=&#34;title&#34;&gt;fdopendir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两个函数返回值：若成功，返回指针；若出错，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;struct dirent *&lt;span class=&#34;title&#34;&gt;readdir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(DIR *dp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回指针；若在目录尾或出错，返回NULL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rewinddir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(DIR *dp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;closeddir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(DIR *dp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若失败，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;telldir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(DIR *dp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：与dp关联的相关位置 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;seekdir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(DIR *dp, &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; loc)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;函数chdir、fchdir和getcwd&#34;&gt;&lt;a href=&#34;#函数chdir、fchdir和getcwd&#34; class=&#34;headerlink&#34; title=&#34;函数chdir、fchdir和getcwd&#34;&gt;&lt;/a&gt;函数&lt;code&gt;chdir&lt;/code&gt;、&lt;code&gt;fchdir&lt;/code&gt;和&lt;code&gt;getcwd&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;chdir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *pathname)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fchdir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;进程调用&lt;code&gt;chdir&lt;/code&gt;和&lt;code&gt;fchdir&lt;/code&gt;函数更改当前工作目录。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;getcwd&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *buf, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;逐层上移，直到遇到根，得到当前工作目录完整的绝对路径。&lt;br&gt;必须像此函数传递两个函数，一个是缓冲区地址&lt;code&gt;buf&lt;/code&gt;(要有足够的长度容纳绝对路径再加上一个终止&lt;code&gt;null&lt;/code&gt;字节)，另一个是缓冲区的长度&lt;code&gt;size&lt;/code&gt;(以字节为单位)。&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="APUE" />
        <updated>2016-02-29T13:48:30.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.iakmai.com/2016/02/25/APUE_study_notes-Files_IO/</id>
        <title>APUE学习笔记——文件IO</title>
        <link rel="alternate" href="https://blog.iakmai.com/2016/02/25/APUE_study_notes-Files_IO/"/>
        <content type="html">&lt;h1 id=&#34;文件描述符&#34;&gt;&lt;a href=&#34;#文件描述符&#34; class=&#34;headerlink&#34; title=&#34;文件描述符&#34;&gt;&lt;/a&gt;文件描述符&lt;/h1&gt;&lt;p&gt;所有打开的文件都通过文件描述符(一个非负整数)引用。&lt;/p&gt;
&lt;p&gt;维基百科上对于文件描述符的解释是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当读、写一个文件时，使用&lt;code&gt;open&lt;/code&gt;或&lt;code&gt;creat&lt;/code&gt;返回的文件描述符标识该文件，将其作为参数传给&lt;code&gt;read&lt;/code&gt;或&lt;code&gt;write&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在POSIX.1的应用程序中，文件描述符0与进程的标准输入关联(STDIN_FILENO)、文件描述符1与进程的标准输出关联(STDOUT_FILENO)、文件描述符2与进程的标准错误关联(STDERR_FILENO)，且已经确定化。&lt;br&gt;文件描述符的变化范围是&lt;code&gt;0~OPEN_MAX-1&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;函数open和openat&#34;&gt;&lt;a href=&#34;#函数open和openat&#34; class=&#34;headerlink&#34; title=&#34;函数open和openat&#34;&gt;&lt;/a&gt;函数&lt;code&gt;open&lt;/code&gt;和&lt;code&gt;openat&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *path, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; oflag, ... &lt;span class=&#34;comment&#34;&gt;/* mode_t mode */&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;openat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *path, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; oflag, ... &lt;span class=&#34;comment&#34;&gt;/* mode_t mode */&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *path ：文件的名称，可以包含（绝对和相对）路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *flags：文件打开模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *mode：用来规定对该文件的所有者，文件的用户组及系 统中其他用户的访问权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两函数的返回值： 若成功，返回文件描述符； 若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;打开方式&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_RDONLY&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;只读打开.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_WRONLY&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;只写打开.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_RDWR&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;读、写打开.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_EXEC&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;只执行打开.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_SEARCH&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;只搜索打开 (应用于目录).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_APPEND&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;每次写时都追加到文件的尾端.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_CLOEXEC&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置&lt;code&gt;FD_CLOEXEC&lt;/code&gt;文件描述符.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_CREAT&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;若此文件不存在则创建它.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_DIRECTORY&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果&lt;code&gt;path&lt;/code&gt;引用的不是目录，则出错.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_EXCL&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果同时指定了&lt;code&gt;O_CREAT&lt;/code&gt;，而文件已存在，则出错.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_NOCTTY&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果&lt;code&gt;path&lt;/code&gt;引用的是终端设备，则不将该设备分配作为此进程的控制终端.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_NOFOLLOW&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果&lt;code&gt;path&lt;/code&gt;引用的是一个符号连接，则出错.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_NONBLOCK&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果&lt;code&gt;path&lt;/code&gt;引用的是一个&lt;code&gt;FIFO&lt;/code&gt;、一个块特殊文件或一个自负特殊文件，则此选项为文件的本次打开操作和后续的I/O操作设置非阻塞方式.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_SYNC&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;使每次&lt;code&gt;write&lt;/code&gt;等待物理I/O完成，包括由该&lt;code&gt;write&lt;/code&gt;操作引起的文件属性更新所需的I/O.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_TRUNC&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果此文件存在，而且为只写或读-写成功打开，则将其长度截断为0.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_TTY_INIT&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果打开一个还未打开的终端设备，设置非标准&lt;code&gt;termios&lt;/code&gt;参数值，使其符合&lt;code&gt;Single UNIX Specification&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_DSYNC&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;使每次&lt;code&gt;write&lt;/code&gt;要等待物理I/O完成，但是如果该写操作并不影响读取刚写入的数据，则不需等待文件属性被更新.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O_RSYNC&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;使每一个一文件描述符作为参数进行的&lt;code&gt;read&lt;/code&gt;操作等待，直至所有对文件同一部份挂起的写操作都完成.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;fd参数吧open和openat函数区分开，共有3种可能性。&#34;&gt;&lt;a href=&#34;#fd参数吧open和openat函数区分开，共有3种可能性。&#34; class=&#34;headerlink&#34; title=&#34;fd参数吧open和openat函数区分开，共有3种可能性。&#34;&gt;&lt;/a&gt;&lt;code&gt;fd&lt;/code&gt;参数吧&lt;code&gt;open&lt;/code&gt;和&lt;code&gt;openat&lt;/code&gt;函数区分开，共有3种可能性。&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;参数指定的是绝对路径名，在这种情况下，&lt;code&gt;fd&lt;/code&gt;参数被忽略，&lt;code&gt;openat&lt;/code&gt;函数就相当于&lt;code&gt;open&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;参数指定的是相对路径名，&lt;code&gt;fd&lt;/code&gt;参数指出了相对路径名在文件系统中的开始地址。&lt;code&gt;fd&lt;/code&gt;参数是通过打开相对路径名所在的目录来获取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;参数指定了相对路径名，&lt;code&gt;fd&lt;/code&gt;参数具有特殊值&lt;code&gt;AT_FDCWD&lt;/code&gt;。在这种情况下，路径名在当前工作目录中获取，&lt;code&gt;openat&lt;/code&gt;函数在操作上与&lt;code&gt;open&lt;/code&gt;函数类似。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;函数creat&#34;&gt;&lt;a href=&#34;#函数creat&#34; class=&#34;headerlink&#34; title=&#34;函数creat&#34;&gt;&lt;/a&gt;函数&lt;code&gt;creat&lt;/code&gt;&lt;/h1&gt;&lt;h3 id=&#34;调用函数creat创建一个新的文件&#34;&gt;&lt;a href=&#34;#调用函数creat创建一个新的文件&#34; class=&#34;headerlink&#34; title=&#34;调用函数creat创建一个新的文件&#34;&gt;&lt;/a&gt;调用函数&lt;code&gt;creat&lt;/code&gt;创建一个新的文件&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;creat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *path, &lt;span class=&#34;keyword&#34;&gt;mode_t&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值： 若成功，返回为只写打开的文件描述符；如出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等效于：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(path, O_WRONLY|O_CREAT|O_TRUNC, mode);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;函数close&#34;&gt;&lt;a href=&#34;#函数close&#34; class=&#34;headerlink&#34; title=&#34;函数close&#34;&gt;&lt;/a&gt;函数&lt;code&gt;close&lt;/code&gt;&lt;/h1&gt;&lt;h3 id=&#34;调用close函数关闭一个打开文件&#34;&gt;&lt;a href=&#34;#调用close函数关闭一个打开文件&#34; class=&#34;headerlink&#34; title=&#34;调用close函数关闭一个打开文件&#34;&gt;&lt;/a&gt;调用&lt;code&gt;close&lt;/code&gt;函数关闭一个打开文件&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；如出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;函数lseek&#34;&gt;&lt;a href=&#34;#函数lseek&#34; class=&#34;headerlink&#34; title=&#34;函数lseek&#34;&gt;&lt;/a&gt;函数&lt;code&gt;lseek&lt;/code&gt;&lt;/h1&gt;&lt;h3 id=&#34;当前文件偏移量-current-file-offset-：它通常是一个非负整数，用以度量从文件开始处计算的字节数。&#34;&gt;&lt;a href=&#34;#当前文件偏移量-current-file-offset-：它通常是一个非负整数，用以度量从文件开始处计算的字节数。&#34; class=&#34;headerlink&#34; title=&#34;当前文件偏移量(current file offset)：它通常是一个非负整数，用以度量从文件开始处计算的字节数。&#34;&gt;&lt;/a&gt;当前文件偏移量(current file offset)：它通常是一个非负整数，用以度量从文件开始处计算的字节数。&lt;/h3&gt;&lt;h3 id=&#34;调用lseek显式的为一个打开文件设置偏移量。&#34;&gt;&lt;a href=&#34;#调用lseek显式的为一个打开文件设置偏移量。&#34; class=&#34;headerlink&#34; title=&#34;调用lseek显式的为一个打开文件设置偏移量。&#34;&gt;&lt;/a&gt;调用&lt;code&gt;lseek&lt;/code&gt;显式的为一个打开文件设置偏移量。&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;off_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lseek&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;off_t&lt;/span&gt; offset, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; whence)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若辰宫，返回新的文件偏移量；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对参数&lt;code&gt;offset&lt;/code&gt;的解释与参数&lt;code&gt;whence&lt;/code&gt;的值有关。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若&lt;code&gt;whence&lt;/code&gt;是&lt;code&gt;SEEK_SET&lt;/code&gt;，则经该文件的偏移量设置为距文件开始处&lt;code&gt;offset&lt;/code&gt;个字节。&lt;/li&gt;
&lt;li&gt;若&lt;code&gt;whence&lt;/code&gt;是&lt;code&gt;SEEK_CUR&lt;/code&gt;，则经该文件的偏移量设置为其当前量增加&lt;code&gt;offset&lt;/code&gt;，&lt;code&gt;offset&lt;/code&gt;可为正或负。&lt;/li&gt;
&lt;li&gt;若&lt;code&gt;whence&lt;/code&gt;是&lt;code&gt;SEEK_END&lt;/code&gt;，则经该文件的偏移量设置为文件长度加&lt;code&gt;offset&lt;/code&gt;，&lt;code&gt;offset&lt;/code&gt;可正可负。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;函数read&#34;&gt;&lt;a href=&#34;#函数read&#34; class=&#34;headerlink&#34; title=&#34;函数read&#34;&gt;&lt;/a&gt;函数&lt;code&gt;read&lt;/code&gt;&lt;/h1&gt;&lt;h3 id=&#34;调用read函数从打开文件中读数据。&#34;&gt;&lt;a href=&#34;#调用read函数从打开文件中读数据。&#34; class=&#34;headerlink&#34; title=&#34;调用read函数从打开文件中读数据。&#34;&gt;&lt;/a&gt;调用&lt;code&gt;read&lt;/code&gt;函数从打开文件中读数据。&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *buf, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; nbytes)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：读到的字节数，若已到文件尾，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有多种情况可使实际读到的字节数少于要求读的字节数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读到普通文件时，在读到要求字计数之前已到达了文件微端。&lt;/li&gt;
&lt;li&gt;当从终端设备读时，通常一次最多读一行。&lt;/li&gt;
&lt;li&gt;当从网络读时，网络中的缓冲机制可能造成返回值小于所要求的字节数。&lt;/li&gt;
&lt;li&gt;当从管道或&lt;code&gt;FIFO&lt;/code&gt;读时，如若管道包含的字节少于所需的数量，那么&lt;code&gt;read&lt;/code&gt;将只返回实际可用的字节数。&lt;/li&gt;
&lt;li&gt;当从某些面向记录的设备读时，一次最多返回一个记录。&lt;/li&gt;
&lt;li&gt;当一信号造成中断，而已经读到部分数据量时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;函数write&#34;&gt;&lt;a href=&#34;#函数write&#34; class=&#34;headerlink&#34; title=&#34;函数write&#34;&gt;&lt;/a&gt;函数&lt;code&gt;write&lt;/code&gt;&lt;/h1&gt;&lt;h3 id=&#34;调用write函数向打开文件写数据。&#34;&gt;&lt;a href=&#34;#调用write函数向打开文件写数据。&#34; class=&#34;headerlink&#34; title=&#34;调用write函数向打开文件写数据。&#34;&gt;&lt;/a&gt;调用&lt;code&gt;write&lt;/code&gt;函数向打开文件写数据。&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *buf, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; nbytes)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回已写的字节数；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;函数pread和pwrite&#34;&gt;&lt;a href=&#34;#函数pread和pwrite&#34; class=&#34;headerlink&#34; title=&#34;函数pread和pwrite&#34;&gt;&lt;/a&gt;函数&lt;code&gt;pread&lt;/code&gt;和&lt;code&gt;pwrite&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pread&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *buf, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; nbytes. &lt;span class=&#34;keyword&#34;&gt;off_t&lt;/span&gt; offset)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：读到的字节数，若已到文件尾，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pwrite&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *buf, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; nbytes, &lt;span class=&#34;keyword&#34;&gt;off_t&lt;/span&gt; offset)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;调用&lt;code&gt;pread&lt;/code&gt;相当于调用&lt;code&gt;lseek&lt;/code&gt;后调用&lt;code&gt;read&lt;/code&gt;，但是&lt;code&gt;pread&lt;/code&gt;又与这种顺序调用有下列重要区别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用&lt;code&gt;pread&lt;/code&gt;时，无法中断其定位和都读操作。&lt;/li&gt;
&lt;li&gt;不更新当前文件偏移量。&lt;br&gt;调用&lt;code&gt;pwrite&lt;/code&gt;相当于调用&lt;code&gt;lseek&lt;/code&gt;后调用&lt;code&gt;write&lt;/code&gt;，但也与它们有类似的区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;原子操作(atomic operation)；指的是由多步组成一个一个操作。如果该操作原子地执行，则要么执行所有步骤，要么一步也不执行，不可能只执行所有步骤的一个子集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;函数dup和dup2&#34;&gt;&lt;a href=&#34;#函数dup和dup2&#34; class=&#34;headerlink&#34; title=&#34;函数dup和dup2&#34;&gt;&lt;/a&gt;函数&lt;code&gt;dup&lt;/code&gt;和&lt;code&gt;dup2&lt;/code&gt;&lt;/h1&gt;&lt;h3 id=&#34;复制一个现有的文件描述符&#34;&gt;&lt;a href=&#34;#复制一个现有的文件描述符&#34; class=&#34;headerlink&#34; title=&#34;复制一个现有的文件描述符&#34;&gt;&lt;/a&gt;复制一个现有的文件描述符&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dup&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dup2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd2)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 两函数的返回值：若成功，返回新的文件描述符；如出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;函数sync、fsync和fdatasync&#34;&gt;&lt;a href=&#34;#函数sync、fsync和fdatasync&#34; class=&#34;headerlink&#34; title=&#34;函数sync、fsync和fdatasync&#34;&gt;&lt;/a&gt;函数&lt;code&gt;sync&lt;/code&gt;、&lt;code&gt;fsync&lt;/code&gt;和&lt;code&gt;fdatasync&lt;/code&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;内核通常先将数据复制到缓冲区中，然后排入队列，晚些时候写入磁盘。这种方法被称为&lt;code&gt;延迟写(delayed write)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unitstd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fsync&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fdatasync&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，返回0；若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;sync&lt;/code&gt;只是将所有修改过的块缓冲区排入写队列，然后就返回，它并不等待实际写磁盘操作结束。&lt;br&gt;&lt;code&gt;fsync&lt;/code&gt;函数只对由文件描述符&lt;code&gt;fd&lt;/code&gt;指定的一个文件起作用，并且等待写磁盘操作结束才返回。&lt;br&gt;&lt;code&gt;fdatasync&lt;/code&gt;函数类似于&lt;code&gt;fsync&lt;/code&gt;，但它只影响文件的数据部分。&lt;/p&gt;
&lt;h1 id=&#34;函数fcntl&#34;&gt;&lt;a href=&#34;#函数fcntl&#34; class=&#34;headerlink&#34; title=&#34;函数fcntl&#34;&gt;&lt;/a&gt;函数&lt;code&gt;fcntl&lt;/code&gt;&lt;/h1&gt;&lt;h3 id=&#34;改变已经打开文件的属性。&#34;&gt;&lt;a href=&#34;#改变已经打开文件的属性。&#34; class=&#34;headerlink&#34; title=&#34;改变已经打开文件的属性。&#34;&gt;&lt;/a&gt;改变已经打开文件的属性。&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fcntl&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; cmd, ... &lt;span class=&#34;comment&#34;&gt;/* int arg */&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若成功，则依赖cmd，若出错，返回-1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;fcntl函数有以下5种功能。&#34;&gt;&lt;a href=&#34;#fcntl函数有以下5种功能。&#34; class=&#34;headerlink&#34; title=&#34;fcntl函数有以下5种功能。&#34;&gt;&lt;/a&gt;&lt;code&gt;fcntl&lt;/code&gt;函数有以下5种功能。&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;复制一个已有的描述符 (&lt;code&gt;cmd=F_DUPFD&lt;/code&gt;或&lt;code&gt;F_DUPFD_CLOEXEC&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;获取/设置文件描述符标志 (&lt;code&gt;cmd=F_GETFD&lt;/code&gt;或&lt;code&gt;F_SETFD&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;获取/设置文件状态标志 (&lt;code&gt;cmd=F_GETFL&lt;/code&gt;或&lt;code&gt;F_SETFL&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;获取/设置异步I/O所有权 (&lt;code&gt;cmd=F_GETOWN&lt;/code&gt;或&lt;code&gt;F_SETOWN&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;获取/设置记录锁 (&lt;code&gt;cmd=F_GETLK&lt;/code&gt;或&lt;code&gt;F_SETLKW&lt;/code&gt;)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;|cmd|功能&lt;br&gt;|&lt;br&gt;|——|:—————————————————-|&lt;br&gt;|&lt;code&gt;F_DUPFD&lt;/code&gt;|复制文件描述符&lt;code&gt;fd&lt;/code&gt;。|&lt;br&gt;|&lt;code&gt;F_DUPFD_CLOEXEC&lt;/code&gt;|复制文件描述符，设置与新描述符关联的&lt;code&gt;FD_CLOEXEC&lt;/code&gt;文件描述符标志的值，返回新文件描述符。|&lt;br&gt;|&lt;code&gt;F_GETFD&lt;/code&gt;|对应于&lt;code&gt;fd&lt;/code&gt;的文件描述符标志作为函数值返回。|&lt;br&gt;|&lt;code&gt;F_SETFD&lt;/code&gt;|对于&lt;code&gt;fd&lt;/code&gt;设置文件描述符标志。|&lt;br&gt;|&lt;code&gt;F_GETFL&lt;/code&gt;|对应于&lt;code&gt;fd&lt;/code&gt;的文件状态标志作为函数值返回。|&lt;br&gt;|&lt;code&gt;F_SETFL&lt;/code&gt;|将文件状态标志设置为第3个参数的值。可以更改的几个标志是：&lt;code&gt;O_APPEND&lt;/code&gt;、&lt;code&gt;O_NONBLOCK&lt;/code&gt;、&lt;code&gt;O_SYNC&lt;/code&gt;、&lt;code&gt;O_DSYNC&lt;/code&gt;、&lt;code&gt;O_RSYNC&lt;/code&gt;、&lt;code&gt;O_FSYNC&lt;/code&gt;、和&lt;code&gt;O_ASYNC&lt;/code&gt;。|&lt;br&gt;|&lt;code&gt;F_GETOWN&lt;/code&gt;|获取当前接收&lt;code&gt;SIGIO&lt;/code&gt;和&lt;code&gt;SIGURG&lt;/code&gt;信号进程ID或进程组ID。|&lt;br&gt;|&lt;code&gt;F_SETOWN&lt;/code&gt;|设置接收&lt;code&gt;SIGIO&lt;/code&gt;和&lt;code&gt;SIGURG&lt;/code&gt;信号的进程ID或进程组ID。|&lt;/p&gt;
&lt;h1 id=&#34;函数ioctl&#34;&gt;&lt;a href=&#34;#函数ioctl&#34; class=&#34;headerlink&#34; title=&#34;函数ioctl&#34;&gt;&lt;/a&gt;函数&lt;code&gt;ioctl&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt; /* System V */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/ioctl.h&amp;gt;  /* BSD and Linux */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ioctl&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fd, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; request, ...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 返回值：若出错，返回-1；若成功，返回其他值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;dev-fd&#34;&gt;&lt;a href=&#34;#dev-fd&#34; class=&#34;headerlink&#34; title=&#34;/dev/fd&#34;&gt;&lt;/a&gt;&lt;code&gt;/dev/fd&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;较新的系统都提供名为&lt;code&gt;/dev/fd&lt;/code&gt;的目录，其目录项是名为0、1、2等的文件。打开文件&lt;code&gt;/dev/fdn&lt;/code&gt;等效于复制描述符n(假设描述符n是打开的).&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="APUE" />
        <updated>2016-02-25T00:36:08.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.iakmai.com/2016/01/28/%E7%BC%96%E8%AF%91apue-3e%E5%B9%B6%E8%A7%A3%E5%86%B3%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/</id>
        <title>编译apue.3e并解决编译错误</title>
        <link rel="alternate" href="https://blog.iakmai.com/2016/01/28/%E7%BC%96%E8%AF%91apue-3e%E5%B9%B6%E8%A7%A3%E5%86%B3%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/"/>
        <content type="html">&lt;h2 id=&#34;下载源代码&#34;&gt;&lt;a href=&#34;#下载源代码&#34; class=&#34;headerlink&#34; title=&#34;下载源代码&#34;&gt;&lt;/a&gt;下载源代码&lt;/h2&gt;&lt;p&gt;我们在学习APUE这本书的时候，总会见到书上的源代码总会引用&lt;code&gt;apue.h&lt;/code&gt;这个头文件，这个并不是Linux系统自带的。所以，我们要自己编译。&lt;br&gt;我们在&lt;a href=&#34;http://www.apuebook.com/src.3e.tar.gz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.apuebook.com/src.3e.tar.gz&lt;/a&gt;下载源代码后，解压。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -zxvf src.3e.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后编译&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo make&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是在编译过程中，会出现错误，错误部分的log是这样的。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;gcc -ansi -I..&amp;#x2F;include -Wall -DLINUX -D_GNU_SOURCE  badexit2.c -o badexit2  -L..&amp;#x2F;lib -lapue -pthread -lrt -lbsd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;ld: cannot find -lbsd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;collect2: ld returned 1 exit status&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Makefile:31: recipe for target &amp;#39;badexit2&amp;#39; failed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;make[1]: *** [badexit2] Error 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;make[1]: Leaving directory &amp;#39;&amp;#x2F;home&amp;#x2F;pi&amp;#x2F;apue.3e&amp;#x2F;threads&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Makefile:6: recipe for target &amp;#39;all&amp;#39; failed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;make: *** [all] Error 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;修复&#34;&gt;&lt;a href=&#34;#修复&#34; class=&#34;headerlink&#34; title=&#34;修复&#34;&gt;&lt;/a&gt;修复&lt;/h2&gt;&lt;p&gt;出现这个错误是因为，我们缺少一个库。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get inatall libbsd-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装完成后，重新进行编译.&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp .&amp;#x2F;include&amp;#x2F;apue.h .&amp;#x2F;lib&amp;#x2F;error.c &amp;#x2F;usr&amp;#x2F;include&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，在&lt;code&gt;/usr/include/apue.h&lt;/code&gt;的&lt;code&gt;ifdef&lt;/code&gt;和&lt;code&gt;endif&lt;/code&gt;中间添加&lt;code&gt;#include &amp;quot;error.c&amp;quot;&lt;/code&gt;,就可以在编写的程序中，愉快的使用&lt;code&gt;apue.h&lt;/code&gt;了。&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="APUE" />
        <updated>2016-01-28T14:38:58.000Z</updated>
    </entry>
</feed>

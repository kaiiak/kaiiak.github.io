{
    "version": "https://jsonfeed.org/version/1",
    "title": "KAIIAK • All posts by \"树莓派\" tag",
    "description": null,
    "home_page_url": "https://blog.iakmai.com",
    "items": [
        {
            "id": "https://blog.iakmai.com/2015/11/14/%E9%80%9A%E8%BF%87pylirc%E5%AE%9E%E7%8E%B0%E7%BA%A2%E5%A4%96%E6%8E%A7%E5%88%B6/",
            "url": "https://blog.iakmai.com/2015/11/14/%E9%80%9A%E8%BF%87pylirc%E5%AE%9E%E7%8E%B0%E7%BA%A2%E5%A4%96%E6%8E%A7%E5%88%B6/",
            "title": "通过pylirc实现红外控制",
            "date_published": "2015-11-14T12:39:40.000Z",
            "content_html": "<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><p>在2005年更新的官方文档，点击<a href=\"http://bazaar.launchpad.net/~rockstar/pylirc2/trunk/view/head:/doc/simple.txt\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyLirc v0.0.5</span><br><span class=\"line\"></span><br><span class=\"line\">Introduction</span><br><span class=\"line\"></span><br><span class=\"line\">pyLirc is a module for Python that interacts with lirc to give </span><br><span class=\"line\">Python programs the ability to receive commands from remote </span><br><span class=\"line\">controls.</span><br><span class=\"line\"></span><br><span class=\"line\">This isn&#39;t much of documentation, but at least it&#39;s a start and</span><br><span class=\"line\">there isn&#39;t much to document right now anyway.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Initialization</span><br><span class=\"line\"></span><br><span class=\"line\">Before you can receive any commands from lirc, you&#39;ll need to </span><br><span class=\"line\">initialize the module. After importing pyLirc, call the pylirc.init()</span><br><span class=\"line\">function:</span><br><span class=\"line\"></span><br><span class=\"line\">   import pylirc</span><br><span class=\"line\"></span><br><span class=\"line\">   integer &#x3D; pylirc.init(string name[, string configuration [, integer blocking ]])</span><br><span class=\"line\"></span><br><span class=\"line\">the returnvalue is the returnvalue of lircs client library</span><br><span class=\"line\">lirc_init(), ie a socket, or zero on failure.</span><br><span class=\"line\"></span><br><span class=\"line\">The socket can be used with select.select() to wait for data if you don&#39;t</span><br><span class=\"line\">want to use blocking. This is especially useful in multithreaded programs</span><br><span class=\"line\">as blocking mode of pylirc will blick all threads, whereas select() will</span><br><span class=\"line\">only block the current and with optional timeout.</span><br><span class=\"line\"></span><br><span class=\"line\">name: the name used for your program in the lirc configuration</span><br><span class=\"line\">file, must be supplied.</span><br><span class=\"line\"></span><br><span class=\"line\">configuration:  a filename to a lirc configuration file in case you wish not to</span><br><span class=\"line\">use lircs default configuration file (usually ~&#x2F;.lircrc).</span><br><span class=\"line\"></span><br><span class=\"line\">blocking: a flag indicating wether you want blocking mode or not. See also </span><br><span class=\"line\">blocking() and select.select() (latter in python docs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Polling</span><br><span class=\"line\"></span><br><span class=\"line\">If initialization was ok, you can poll lirc for commands. To read any commands</span><br><span class=\"line\">in queue call pylirc.nextcode():</span><br><span class=\"line\"></span><br><span class=\"line\">   list &#x3D; pylirc.nextcode([integer Exteneded])</span><br><span class=\"line\"></span><br><span class=\"line\">The returnvalue is &#39;None&#39;, if no commands was on the queue, or a list</span><br><span class=\"line\">containing the commands read.</span><br><span class=\"line\"></span><br><span class=\"line\">To get the commands one by one enumerate the list:</span><br><span class=\"line\"></span><br><span class=\"line\">   for code in list:</span><br><span class=\"line\">      print code</span><br><span class=\"line\"></span><br><span class=\"line\">If you supply the optional argument Extended as true, code will be a dictionary</span><br><span class=\"line\">otherwise it will be a string (old behaviour).</span><br><span class=\"line\"></span><br><span class=\"line\">The dictionary currently contains:</span><br><span class=\"line\">&quot;config&quot;: The config string from lirc config file - the same string you&#39;d get in</span><br><span class=\"line\">          non-extended mode.</span><br><span class=\"line\">&quot;repeat&quot;: The repeat count of the buttonpress.</span><br><span class=\"line\">      </span><br><span class=\"line\">Note, that there can still be more commands on queue after a call</span><br><span class=\"line\">to pylirc.nextcode(). You should call it in a loop until you get</span><br><span class=\"line\">&#39;None&#39; back.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Exiting</span><br><span class=\"line\"></span><br><span class=\"line\">When you&#39;re done using pyLirc and before you exit your program you</span><br><span class=\"line\">should clean up:</span><br><span class=\"line\"></span><br><span class=\"line\">   pylirc.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Changing mode</span><br><span class=\"line\"></span><br><span class=\"line\">When you initialize pyLirc, you can chose wether you want blocking or</span><br><span class=\"line\">non-blocking mode. Blocking mode means pylirc.nextcode() waits until</span><br><span class=\"line\">there is a command to be read until it returns.</span><br><span class=\"line\">To change mode after initialization, use blocking():</span><br><span class=\"line\"></span><br><span class=\"line\">   success &#x3D; pylirc.blocking(int)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中文翻译\"><a href=\"#中文翻译\" class=\"headerlink\" title=\"中文翻译\"></a>中文翻译</h2><p>自己尝试翻译一下，英语渣渣，有不正确的地方请指正。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyLirc v0.0.5</span><br><span class=\"line\"></span><br><span class=\"line\">介绍</span><br><span class=\"line\"></span><br><span class=\"line\">pyLirc是一个与LIRC交互给</span><br><span class=\"line\">Python程序从远程接收远程命令的能力</span><br><span class=\"line\">的Python模块。</span><br><span class=\"line\"></span><br><span class=\"line\">这是没有太多的文档，毕竟它是一个新项目，</span><br><span class=\"line\">现在反正没有太多的文档。</span><br><span class=\"line\"></span><br><span class=\"line\">初始化</span><br><span class=\"line\"></span><br><span class=\"line\">在接受来自lirc的命令之前，你应该初始化本模块。在 import pylirc之后，使用 pylirc.inti()函数：</span><br><span class=\"line\">\timport pylirc</span><br><span class=\"line\">\tinteger &#x3D; pylirc.init(string name[, string configuration [, integer blocking ]])</span><br><span class=\"line\">返回值是客户端库中lirc_init()函数的返回值，是一个socket，如果返回值是0，则初始化失败。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pylirc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Buttons</span>:</span></span><br><span class=\"line\">    SELECT = <span class=\"number\">0</span></span><br><span class=\"line\">    RIGHT = <span class=\"number\">1</span></span><br><span class=\"line\">    DOWN = <span class=\"number\">2</span></span><br><span class=\"line\">    UP = <span class=\"number\">3</span></span><br><span class=\"line\">    LEFT = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, app, conf)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> pylirc.init(app, conf, <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Unable to init pylirc\"</span>);</span><br><span class=\"line\">        pylirc.blocking(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readButton</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        btn = pylirc.nextcode()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> btn:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> btn[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>",
            "tags": [
                "树莓派",
                "pylirc"
            ]
        },
        {
            "id": "https://blog.iakmai.com/2015/10/31/%E5%85%B3%E4%BA%8E%E6%A0%91%E8%8E%93%E6%B4%BElirc%E7%9A%84%E9%85%8D%E7%BD%AE/",
            "url": "https://blog.iakmai.com/2015/10/31/%E5%85%B3%E4%BA%8E%E6%A0%91%E8%8E%93%E6%B4%BElirc%E7%9A%84%E9%85%8D%E7%BD%AE/",
            "title": "关于树莓派lirc的配置",
            "date_published": "2015-10-31T13:10:19.000Z",
            "content_html": "<h2 id=\"记录原因\"><a href=\"#记录原因\" class=\"headerlink\" title=\"记录原因\"></a>记录原因</h2><p>这是我正在DIY的一个<a href=\"https://github.com/kaiiak/NineSky/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">基于树莓派智能家居</a>的过程中，配置lirc的一个小问题的总结。<br>因为在网上搜索到的类似的博客给出的解决方式都不可行，所以打算记录下来，方便后来者。</p>\n<h2 id=\"事情的起因\"><a href=\"#事情的起因\" class=\"headerlink\" title=\"事情的起因\"></a>事情的起因</h2><p>安装lirc——一个开源的红外控制的库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lirc</span><br></pre></td></tr></table></figure>\n<p>配置到这一步时，网络上给出的下一步都是在</p>\n<blockquote>\n<p>加载内核模块</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo modprobe lirc_rpi gpio_in_pin=23gpio_out_pin=24 </span><br></pre></td></tr></table></figure>\n<p>然而照着做以后，并不能成功。</p>\n</blockquote>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>配置树莓派的lirc，需要在<code>/boot/config.txt</code>中添加，在<a href=\"https://github.com/raspberrypi/firmware/blob/master/boot/overlays/README\" target=\"_blank\" rel=\"noopener\">这里</a>找到的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dtoverlay&#x3D;lirc-rpi,gpio_in_pin&#x3D;23,gpio_out_pin&#x3D;24</span><br></pre></td></tr></table></figure>\n<p>然后重启就可以了。</p>\n<p>加载lir_rpi内核模块</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo modprobe lirc_rpi</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mode2 -d /dev/lirc0</span><br></pre></td></tr></table></figure>\n<p>现在就会看到一大串space和pulse交替产生。</p>\n",
            "tags": [
                "Linux",
                "树莓派",
                "lirc"
            ]
        },
        {
            "id": "https://blog.iakmai.com/2015/10/18/%E4%BD%BF%E7%94%A8Python%E6%8E%A7%E5%88%B6%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84GPIO-1/",
            "url": "https://blog.iakmai.com/2015/10/18/%E4%BD%BF%E7%94%A8Python%E6%8E%A7%E5%88%B6%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84GPIO-1/",
            "title": "使用Python控制树莓派的GPIO(1)",
            "date_published": "2015-10-18T09:19:07.000Z",
            "content_html": "<h3 id=\"使用的树莓派2B\"><a href=\"#使用的树莓派2B\" class=\"headerlink\" title=\"使用的树莓派2B\"></a>使用的树莓派2B</h3><p>通过PRI.GPIO来实现Python控制树莓派的GPIO。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在<a href=\"http://pythonhosted.org/RPIO/\" target=\"_blank\" rel=\"noopener\">官方文档</a>中给出了三种按章方式。分别是</p>\n<h3 id=\"用-easy-install或者pip来安装：\"><a href=\"#用-easy-install或者pip来安装：\" class=\"headerlink\" title=\"用 easy_install或者pip来安装：\"></a>用 <code>easy_install</code>或者<code>pip</code>来安装：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-setuptools</span><br><span class=\"line\">sudo easy_install -U RPIO</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从Github上克隆然后安装\"><a href=\"#从Github上克隆然后安装\" class=\"headerlink\" title=\"从Github上克隆然后安装\"></a>从Github上克隆然后安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/metachris/RPIO.git</span><br><span class=\"line\">cd RPIO</span><br><span class=\"line\">sudo python setup.py install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从Github或者别处下载安装\"><a href=\"#从Github或者别处下载安装\" class=\"headerlink\" title=\"从Github或者别处下载安装\"></a>从Github或者别处下载安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/metachris/RPIO/archive/master.tar.gz | tar -xz</span><br><span class=\"line\">cd RPIO-master</span><br><span class=\"line\">sudo python setup.py install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><img src=\"http://ww1.sinaimg.cn/mw690/ae94c92cgw1ex5fscddh0j20fi0bigqz.jpg\" alt=\"树莓派引脚图\"><br><img src=\"http://ww3.sinaimg.cn/mw690/ae94c92cgw1ex6qv7sjpoj20jq0c6gps.jpg\" alt=\"树莓派2B引脚图\"></p>\n<p>这是用wiringPi生成的引脚图，用wiringPi控制GPIO会在以后写。</p>\n<p>树莓派的GPIO大致可以分为INPUT和OUTPUT两种状态。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RPIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置为输入位无上拉</span></span><br><span class=\"line\">RPIO.setup(<span class=\"number\">7</span>, RPIO.IN)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置为输出位有上拉. 可以设置为</span></span><br><span class=\"line\"><span class=\"comment\"># PUD_UP(上拉), PUD_DOWN(下拉) or PUD_OFF (default)</span></span><br><span class=\"line\">RPIO.setup(<span class=\"number\">7</span>, RPIO.IN, pull_up_down=RPIO.PUD_UP)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取GPIO7的输入状态</span></span><br><span class=\"line\">input_value = RPIO.input(<span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置GPIO为输出位</span></span><br><span class=\"line\">RPIO.setup(<span class=\"number\">8</span>, RPIO.OUT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置GPIO8为高电位</span></span><br><span class=\"line\">RPIO.output(<span class=\"number\">8</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置为输出位并给予一个初始值</span></span><br><span class=\"line\">RPIO.setup(<span class=\"number\">8</span>, RPIO.OUT, initial=RPIO.LOW)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改变为BOARD编号模式</span></span><br><span class=\"line\">RPIO.setmode(RPIO.BOARD)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在通道17上设置软件上拉</span></span><br><span class=\"line\">RPIO.set_pullupdn(<span class=\"number\">17</span>, RPIO.PUD_UP)  <span class=\"comment\"># new in RPIO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得通道8的设置(IN、OUT、ALTo)</span></span><br><span class=\"line\">RPIO.gpio_function(<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复位所有由该程序设置过的通道，</span></span><br><span class=\"line\"><span class=\"comment\"># 并清除 GPIO 中断接口</span></span><br><span class=\"line\">RPIO.cleanup()</span><br></pre></td></tr></table></figure>\n\n<p>照着上一篇文章写的那样做，并不能成功。因为RPIO的最后一个release版本是2013年的，并不支持我的树莓派2B。</p>\n<p>如果想在树莓派2B上运行，需要做这些工作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install rpi.gpio</span><br><span class=\"line\">sudo pip freeze</span><br></pre></td></tr></table></figure>\n<p>如果有一行<code>RPi.GPIO==0.511</code>就说明安装成功了。</p>\n<p>然后我们在新建<code>led.py</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">LED = <span class=\"number\">4</span> </span><br><span class=\"line\"></span><br><span class=\"line\">GPIO.setmode(GPIO.BCM)</span><br><span class=\"line\">GPIO.setup(LED, GPIO.OUT)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"结束程序，请按CTRL+C\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\tGPIO.output(LED, <span class=\"literal\">False</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">#延时1s</span></span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tGPIO.output(LED, <span class=\"literal\">True</span>)</span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> KeyboardInterrupt: <span class=\"comment\"># 如果程序被CTRL+C结束</span></span><br><span class=\"line\">\tGPIO.cleanup()</span><br></pre></td></tr></table></figure>\n\n<p>前几天搞不懂GPIO.setmode函数中的参数GPIO.BCM和GPIO.BOARD指的是什么。<br>后来知道BOARD指的是主板引脚编号，而BCM指的是BCM芯片的引脚编号，在本文的配图中有。</p>\n",
            "tags": [
                "Python",
                "树莓派",
                "PRI.GPIO"
            ]
        },
        {
            "id": "https://blog.iakmai.com/2015/10/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9B%B4%E8%BF%9E%E7%94%B5%E8%84%91%E4%BA%8C%E4%B8%89%E4%BA%8B/",
            "url": "https://blog.iakmai.com/2015/10/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9B%B4%E8%BF%9E%E7%94%B5%E8%84%91%E4%BA%8C%E4%B8%89%E4%BA%8B/",
            "title": "树莓派直连电脑二三事",
            "date_published": "2015-10-11T12:09:35.000Z",
            "content_html": "<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>因为在学校的实验室网络不是很稳定，所以树莓派一直不能直接用网线连接网络。而且wpa_supplication真的很不稳定，莫名其妙的罢工好几次，每次只能重新写镜像。<br>种种原因选择了直连电脑的方法来联网,而我的电脑连接的是信号很弱的无线网，无奈条件太艰苦。</p>\n<p>需要额外准备的东西就是一根直通线啦。好啦，接下来就是设置的时间了。</p>\n<p>首先打开网络与共享中心-&gt;更改适配器设置-&gt;右击无线网络连接-&gt;属性-&gt;共享。<br>如图：<br>        <img src=\"http://ww2.sinaimg.cn/mw690/ae94c92cgw1ewxgxexpm2j20ah0camy8.jpg\" alt=\"无线网络属性共享\"><br>根据别人写的教程，做到这步就可以实现远程登录树莓派和树莓派访问外网了。但是我只能实现远程登录树莓派，访问外网实现不了。经过试验，是没有配置DNS服务器的原因，在本地连接的IPV4属性中添加DNS服务器就可以了。这里我使用的是OpenDNS。<br>        <img src=\"http://ww3.sinaimg.cn/mw690/ae94c92cgw1ewxgxrj8stj20bi0bxgn5.jpg\" alt=\"IPV4属性\"></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>windows实现直连访问的技术叫做ICS，百科上的解释如下：</p>\n<blockquote>\n<p>ICS即Internet连接共享(InternetConnectionSharing)的英文简称，是Windows系统针对家庭网络或小型的Intranet网络提供的一种Internet连接共享服务。它实际上相当于一种网络地址转换器，所谓网络地址转换器就是当数据包向前传递的过程中，可以转换数据包中的IP地址和TCP/UDP端口等地址信息。有了网络地址转换器，家庭网络或小型的办公网络中的电脑就可以使用私有地址，并且通过网络地址转换器将私有地址转换成ISP分配的单一的公用IP地址从而实现对Internet的连接。ICS方式也称之为Internet转换连接。</p>\n</blockquote>\n<p>这里是<a href=\"http://windows.microsoft.com/zh-cn/windows/using-internet-connection-sharing#1TC=windows-7\" target=\"_blank\" rel=\"noopener\">在微软的官方帮助文档</a>中对ICS的介绍，使用它也可以连接路由器使用。</p>\n<h3 id=\"推荐阿里和中科大的的树莓派镜像\"><a href=\"#推荐阿里和中科大的的树莓派镜像\" class=\"headerlink\" title=\"推荐阿里和中科大的的树莓派镜像\"></a>推荐阿里和中科大的的树莓派镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;raspbian&#x2F;raspbian&#x2F;   wheezy main contrib non-free rpi</span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;raspbian&#x2F;raspbian&#x2F;   wheezy main contrib non-free rpi</span><br></pre></td></tr></table></figure>",
            "tags": [
                "树莓派"
            ]
        }
    ]
}
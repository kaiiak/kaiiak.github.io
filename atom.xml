<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[KAIIAK]]></title>
  <subtitle><![CDATA[啦啦啦，我是卖萌的小行家]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://kaiiak.github.io//"/>
  <updated>2015-10-19T12:38:16.461Z</updated>
  <id>http://kaiiak.github.io//</id>
  
  <author>
    <name><![CDATA[Kai]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用Python控制树莓派的GPIO(1)]]></title>
    <link href="http://kaiiak.github.io/2015/10/18/%E4%BD%BF%E7%94%A8Python%E6%8E%A7%E5%88%B6%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84GPIO-1/"/>
    <id>http://kaiiak.github.io/2015/10/18/使用Python控制树莓派的GPIO-1/</id>
    <published>2015-10-18T09:19:07.000Z</published>
    <updated>2015-10-19T12:38:16.461Z</updated>
    <content type="html"><![CDATA[<p>通过PRI.GPIO来实现Python控制树莓派的GPIO。</p>
<h2 id="安装">安装</h2><p>在<a href="http://pythonhosted.org/RPIO/" target="_blank" rel="external">官方文档</a>中给出了三种按章方式。分别是</p>
<h3 id="用_easy_install或者pip来安装：">用 <code>easy_install</code>或者<code>pip</code>来安装：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-setuptools&#10;sudo easy_install -U RPIO</span><br></pre></td></tr></table></figure>
<h3 id="从Github上克隆然后安装">从Github上克隆然后安装</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/metachris/RPIO.git&#10;cd RPIO&#10;sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h3 id="从Github或者别处下载安装">从Github或者别处下载安装</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/metachris/RPIO/archive/master.tar.gz | tar -xz&#10;cd RPIO-master&#10;sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2><p><img src="http://ww1.sinaimg.cn/mw690/ae94c92cgw1ex5fscddh0j20fi0bigqz.jpg" alt="树莓派引脚图"><br><img src="http://ww3.sinaimg.cn/mw690/ae94c92cgw1ex6pa0vpesj20hj0brdgy.jpg" alt="引脚对比图"></p>
<p>这是用wiringPi生成的引脚图，用wiringPi控制GPIO会在以后写。</p>
<p>树莓派的GPIO大致可以分为INPUT和OUTPUT两种状态。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPIO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为输入位无上拉</span></span><br><span class="line">RPIO.setup(<span class="number">7</span>, RPIO.IN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为输出位有上拉. 可以设置为</span></span><br><span class="line"><span class="comment"># PUD_UP(上拉), PUD_DOWN(下拉) or PUD_OFF (default)</span></span><br><span class="line">RPIO.setup(<span class="number">7</span>, RPIO.IN, pull_up_down=RPIO.PUD_UP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取GPIO7的输入状态</span></span><br><span class="line">input_value = RPIO.input(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置GPIO为输出位</span></span><br><span class="line">RPIO.setup(<span class="number">8</span>, RPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置GPIO8为高电位</span></span><br><span class="line">RPIO.output(<span class="number">8</span>, <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为输出位并给予一个初始值</span></span><br><span class="line">RPIO.setup(<span class="number">8</span>, RPIO.OUT, initial=RPIO.LOW)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变为BOARD编号模式</span></span><br><span class="line">RPIO.setmode(RPIO.BOARD)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在通道17上设置软件上拉</span></span><br><span class="line">RPIO.set_pullupdn(<span class="number">17</span>, RPIO.PUD_UP)  <span class="comment"># new in RPIO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得通道8的设置(IN、OUT、ALTo)</span></span><br><span class="line">RPIO.gpio_function(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复位所有由该程序设置过的通道，</span></span><br><span class="line"><span class="comment"># 并清除 GPIO 中断接口</span></span><br><span class="line">RPIO.cleanup()</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>通过PRI.GPIO来实现Python控制树莓派的GPIO。</p>
<h2 id="安装">安装</h2><p>在<a href="http://pythonhosted.org/RPIO/" target="_blank" rel="external">官方文档</a>]]>
    </summary>
    
      <category term="PRI.GPIO" scheme="http://kaiiak.github.io/tags/PRI-GPIO/"/>
    
      <category term="Pyhon" scheme="http://kaiiak.github.io/tags/Pyhon/"/>
    
      <category term="树莓派" scheme="http://kaiiak.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Xshell进行上传和下载]]></title>
    <link href="http://kaiiak.github.io/2015/10/12/%E4%BD%BF%E7%94%A8Xshell%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
    <id>http://kaiiak.github.io/2015/10/12/使用Xshell进行上传和下载/</id>
    <published>2015-10-12T13:13:53.000Z</published>
    <updated>2015-10-12T13:28:27.428Z</updated>
    <content type="html"><![CDATA[<p>在日常使用Xshell进行远程登录的时候，我们想通过Xshell在Windows和Linux之间便捷的进行文件传输，这时候我们可以使用 <code>rz</code> 或 <code>sz</code> 命令。</p>
<p>在树莓派上安装<code>rz</code>和<code>sz</code>命令。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install lrzsz</span><br></pre></td></tr></table></figure>
<p>下载某个文件或文件夹<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sz</span> filename</span><br></pre></td></tr></table></figure></p>
<p><code>rz</code>直接把文件拖到Xshell上就可以了.</p>
<p><code>sz</code>和<code>rz</code>的帮助文档<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">rz version 0.12.21rc</span><br><span class="line">Usage: rz [options] [filename.if.xmodem]</span><br><span class="line">Receive files with ZMODEM/YMODEM/XMODEM protocol</span><br><span class="line">    (X) = option applies to XMODEM only</span><br><span class="line">    (Y) = option applies to YMODEM only</span><br><span class="line">    (Z) = option applies to ZMODEM only</span><br><span class="line">  -<span class="ruby">+, --append                append to existing files</span><br><span class="line"></span>  -<span class="ruby">a, --ascii                 <span class="constant">ASCII</span> transfer (change <span class="constant">CR</span>/<span class="constant">LF</span> to <span class="constant">LF</span>)</span><br><span class="line"></span>  -<span class="ruby">b, --binary                binary transfer</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">B</span>, --bufsize <span class="constant">N</span>             buffer <span class="constant">N</span> bytes (<span class="constant">N</span>==<span class="symbol">auto:</span> buffer whole file)</span><br><span class="line"></span>  -<span class="ruby">c, --with-crc              <span class="constant">Use</span> <span class="number">16</span> bit <span class="constant">CRC</span> (<span class="constant">X</span>)</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">C</span>, --allow-remote-commands allow execution of remote commands (<span class="constant">Z</span>)</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">D</span>, --null                  write all received data to /dev/null</span><br><span class="line"></span>      -<span class="ruby">-delay-startup <span class="constant">N</span>       sleep <span class="constant">N</span> seconds before doing anything</span><br><span class="line"></span>  -<span class="ruby">e, --escape                <span class="constant">Escape</span> control characters (<span class="constant">Z</span>)</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">E</span>, --rename                rename any files already existing</span><br><span class="line"></span>      -<span class="ruby">-errors <span class="constant">N</span>              generate <span class="constant">CRC</span> error every <span class="constant">N</span> bytes (debugging)</span><br><span class="line"></span>  -<span class="ruby">h, --help                  <span class="constant">Help</span>, print this usage message</span><br><span class="line"></span>  -<span class="ruby">m, --min-bps <span class="constant">N</span>             stop transmission <span class="keyword">if</span> <span class="constant">BPS</span> below <span class="constant">N</span></span><br><span class="line"></span>  -<span class="ruby"><span class="constant">M</span>, --min-bps-time <span class="constant">N</span>          <span class="keyword">for</span> at least <span class="constant">N</span> seconds (<span class="symbol">default:</span> <span class="number">120</span>)</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">O</span>, --disable-timeouts      disable timeout code, wait forever <span class="keyword">for</span> data</span><br><span class="line"></span>      -<span class="ruby">-o-sync                open output file(s) <span class="keyword">in</span> synchronous write mode</span><br><span class="line"></span>  -<span class="ruby">p, --protect               protect existing files</span><br><span class="line"></span>  -<span class="ruby">q, --quiet                 quiet, no progress reports</span><br><span class="line"></span>  -<span class="ruby">r, --resume                try to resume interrupted file transfer (<span class="constant">Z</span>)</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">R</span>, --restricted            restricted, more secure mode</span><br><span class="line"></span>  -<span class="ruby">s, --stop-at &#123;<span class="constant">HH</span><span class="symbol">:MM|+N</span>&#125;    stop transmission at <span class="constant">HH</span><span class="symbol">:MM</span> <span class="keyword">or</span> <span class="keyword">in</span> <span class="constant">N</span> seconds</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">S</span>, --timesync              request remote time (<span class="symbol">twice:</span> set local time)</span><br><span class="line"></span>      -<span class="ruby">-syslog[=off]          turn syslog on <span class="keyword">or</span> off, <span class="keyword">if</span> possible</span><br><span class="line"></span>  -<span class="ruby">t, --timeout <span class="constant">N</span>             set timeout to <span class="constant">N</span> tenths of a second</span><br><span class="line"></span>      -<span class="ruby">-tcp-server            open socket, wait <span class="keyword">for</span> connection (<span class="constant">Z</span>)</span><br><span class="line"></span>      -<span class="ruby">-tcp-client <span class="constant">ADDR</span><span class="symbol">:PORT</span>  open socket, connect to ... (<span class="constant">Z</span>)</span><br><span class="line"></span>  -<span class="ruby">u, --keep-uppercase        keep upper <span class="keyword">case</span> filenames</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">U</span>, --unrestrict            disable restricted mode (<span class="keyword">if</span> allowed to)</span><br><span class="line"></span>  -<span class="ruby">v, --verbose               be verbose, provide debugging information</span><br><span class="line"></span>  -<span class="ruby">w, --windowsize <span class="constant">N</span>          <span class="constant">Window</span> is <span class="constant">N</span> bytes (<span class="constant">Z</span>)</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">X</span>  --xmodem                use <span class="constant">XMODEM</span> protocol</span><br><span class="line"></span>  -<span class="ruby">y, --overwrite             <span class="constant">Yes</span>, clobber existing file <span class="keyword">if</span> any</span><br><span class="line"></span>      -<span class="ruby">-ymodem                use <span class="constant">YMODEM</span> protocol</span><br><span class="line"></span>  -<span class="ruby"><span class="constant">Z</span>, --zmodem                use <span class="constant">ZMODEM</span> protocol</span><br><span class="line"></span></span><br><span class="line">short options use the same arguments as the long ones</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在日常使用Xshell进行远程登录的时候，我们想通过Xshell在Windows和Linux之间便捷的进行文件传输，这时候我们可以使用 <code>rz</code> 或 <code>sz</code> 命令。</p>
<p>在树莓派上安装<code>rz</code>和<]]>
    </summary>
    
      <category term="Linux" scheme="http://kaiiak.github.io/tags/Linux/"/>
    
      <category term="Xshell" scheme="http://kaiiak.github.io/tags/Xshell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[树莓派直连电脑二三事]]></title>
    <link href="http://kaiiak.github.io/2015/10/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9B%B4%E8%BF%9E%E7%94%B5%E8%84%91%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://kaiiak.github.io/2015/10/11/树莓派直连电脑二三事/</id>
    <published>2015-10-11T12:09:35.000Z</published>
    <updated>2015-10-11T13:22:11.439Z</updated>
    <content type="html"><![CDATA[<h2 id="解决方法">解决方法</h2><p>因为在学校的实验室网络不是很稳定，所以树莓派一直不能直接用网线连接网络。而且wpa_supplication真的很不稳定，莫名其妙的罢工好几次，每次只能重新写镜像。<br>种种原因选择了直连电脑的方法来联网,而我的电脑连接的是信号很弱的无线网，无奈条件太艰苦。</p>
<p>需要额外准备的东西就是一根直通线啦。好啦，接下来就是设置的时间了。</p>
<p>首先打开网络与共享中心-&gt;更改适配器设置-&gt;右击无线网络连接-&gt;属性-&gt;共享。<br>如图：<br>        <img src="http://ww2.sinaimg.cn/mw690/ae94c92cgw1ewxgxexpm2j20ah0camy8.jpg" alt="无线网络属性共享"><br>根据别人写的教程，做到这步就可以实现远程登录树莓派和树莓派访问外网了。但是我只能实现远程登录树莓派，访问外网实现不了。经过试验，是没有配置DNS服务器的原因，在本地连接的IPV4属性中添加DNS服务器就可以了。这里我使用的是OpenDNS。<br>        <img src="http://ww3.sinaimg.cn/mw690/ae94c92cgw1ewxgxrj8stj20bi0bxgn5.jpg" alt="IPV4属性"></p>
<h2 id="原理">原理</h2><p>windows实现直连访问的技术叫做ICS，百科上的解释如下：</p>
<blockquote>
<p>ICS即Internet连接共享(InternetConnectionSharing)的英文简称，是Windows系统针对家庭网络或小型的Intranet网络提供的一种Internet连接共享服务。它实际上相当于一种网络地址转换器，所谓网络地址转换器就是当数据包向前传递的过程中，可以转换数据包中的IP地址和TCP/UDP端口等地址信息。有了网络地址转换器，家庭网络或小型的办公网络中的电脑就可以使用私有地址，并且通过网络地址转换器将私有地址转换成ISP分配的单一的公用IP地址从而实现对Internet的连接。ICS方式也称之为Internet转换连接。</p>
</blockquote>
<p>这里是<a href="http://windows.microsoft.com/zh-cn/windows/using-internet-connection-sharing#1TC=windows-7" target="_blank" rel="external">在微软的官方帮助文档</a>中对ICS的介绍，使用它也可以连接路由器使用。</p>
<h3 id="推荐阿里和中科大的的树莓派镜像">推荐阿里和中科大的的树莓派镜像</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb <span class="symbol">http:</span>/<span class="regexp">/mirrors.aliyun.com/raspbian</span><span class="regexp">/raspbian/</span>   wheezy main contrib non-free rpi</span><br><span class="line">deb <span class="symbol">http:</span>/<span class="regexp">/mirrors.ustc.edu.cn/raspbian</span><span class="regexp">/raspbian/</span>   wheezy main contrib non-free rpi</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="解决方法">解决方法</h2><p>因为在学校的实验室网络不是很稳定，所以树莓派一直不能直接用网线连接网络。而且wpa_supplication真的很不稳定，莫名其妙的罢工好几次，每次只能重新写镜像。<br>种种原因选择了直连电脑的方法来联网,而我的电脑连接的是信]]>
    </summary>
    
      <category term="树莓派" scheme="http://kaiiak.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[打算买个小米路由刷openWRT]]></title>
    <link href="http://kaiiak.github.io/2015/08/05/%E6%89%93%E7%AE%97%E4%B9%B0%E4%B8%AA%E6%9E%81%E8%B7%AF%E7%94%B1%E5%88%B7openWRT/"/>
    <id>http://kaiiak.github.io/2015/08/05/打算买个极路由刷openWRT/</id>
    <published>2015-08-05T09:28:20.000Z</published>
    <updated>2015-08-05T13:07:03.017Z</updated>
    <content type="html"><![CDATA[<p>主要是因为学校的天翼客户端不能用路由器，这样的话我的树莓派就没法用了。<br>所以买个路由器刷openWRT，然后破解客户端，在openWRT上编写破解程序用路由器分享wifi。毕竟动态域名也是要一个外网ip的。<br>哈哈～<br>这是想象之中的，但愿我能坚持下来吧。<br>Thx～<br>然而在极路由和小米路由器mini之间我选择了小米路由mini。<br>毕竟第一次折腾openWRT，不是很敢自己刷。可以直接在他们定制的openWRT系统上折腾。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要是因为学校的天翼客户端不能用路由器，这样的话我的树莓派就没法用了。<br>所以买个路由器刷openWRT，然后破解客户端，在openWRT上编写破解程序用路由器分享wifi。毕竟动态域名也是要一个外网ip的。<br>哈哈～<br>这是想象之中的，但愿我能坚持下来吧。<b]]>
    </summary>
    
      <category term="openWRT" scheme="http://kaiiak.github.io/tags/openWRT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决Yilia主题的subnav中链接的问题]]></title>
    <link href="http://kaiiak.github.io/2015/08/01/%E8%A7%A3%E5%86%B3Yilia%E4%B8%BB%E9%A2%98%E7%9A%84subnav%E4%B8%AD%E9%93%BE%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://kaiiak.github.io/2015/08/01/解决Yilia主题的subnav中链接的问题/</id>
    <published>2015-07-31T16:11:23.000Z</published>
    <updated>2015-07-31T18:07:04.429Z</updated>
    <content type="html"><![CDATA[<h2 id="问题说明">问题说明</h2><p>我很喜欢Yilia这个漂亮的主题，但是当我自己用的时候发现在subnav区生成的链接并不是我想要的。比如我的github地址是<code>github.com/kaiiak</code>，但是实际生成的是<code>kaiiak.github.io/github.com/kaiiak</code>。微博地址也是这样，邮箱地址也是。</p>
<h2 id="心路历程">心路历程</h2><p>我一点一点试验嘛，今天一晚上翻来覆去改了有30多次。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subnav:</span><br><span class="line">  github: "https://github.com/kaiiak"</span><br><span class="line">  weibo:  "http://weibo.com/itkaikai"</span><br><span class="line">  #mail:   "itkaikai@gmail.com"</span><br></pre></td></tr></table></figure>
<p>  这时可以了，我以为是因为链接对齐了呢，可是我把mail那里的<code>#</code>去掉后，发现邮箱那一栏生成的地址还是没变啊。我又陷入了沉思～</p>
<h2 id="问题解决">问题解决</h2><p>解决的原因是我把git生成的diff看了一遍，发现微博那一栏在没加<code>http://</code>时，生成的html代码是这样的<code>/weibo.com/itkaikai</code>，加了<code>http://</code>后生成的html代码就变成了<code>http://weibo.com/itkaikai</code>了。看到这里，大家一定会明白了。<br>把subnav改成这样子就可以了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subnav:</span><br><span class="line">  github: "https://github.com/kaiiak"</span><br><span class="line">  weibo:  "http://weibo.com/itkaikai"</span><br><span class="line">  mail:   "mailto:itkaikai@gmail.com"</span><br></pre></td></tr></table></figure></p>
<h2 id="后记">后记</h2><p>把时间花费在打磨工具上有点很吃亏啊，还是等有钱买个vps好了。<br>晚安～</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题说明">问题说明</h2><p>我很喜欢Yilia这个漂亮的主题，但是当我自己用的时候发现在subnav区生成的链接并不是我想要的。比如我的github地址是<code>github.com/kaiiak</code>，但是实际生成的是<code>kaiiak]]>
    </summary>
    
      <category term="Hexo主题" scheme="http://kaiiak.github.io/tags/Hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一篇]]></title>
    <link href="http://kaiiak.github.io/2015/07/30/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://kaiiak.github.io/2015/07/30/第一篇/</id>
    <published>2015-07-30T15:59:17.000Z</published>
    <updated>2015-07-31T18:07:04.414Z</updated>
    <content type="html"><![CDATA[<h2 id="第一次在github上写博客">第一次在github上写博客</h2><p>哈哈，有点小兴奋呢</p>
<h3 id="测试下代码高亮">测试下代码高亮</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最近在做ACM和准备电赛，多多加油！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="第一次在github上写博客">第一次在github上写博客</h2><p>哈哈，有点小兴奋呢</p>
<h3 id="测试下代码高亮">测试下代码高亮</h3><figure class="highlight c"><table><tr><td class="g]]>
    </summary>
    
      <category term="随笔" scheme="http://kaiiak.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>